var gs=Object.defineProperty;var xs=(g,t,e)=>t in g?gs(g,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):g[t]=e;var j=(g,t,e)=>(xs(g,typeof t!="symbol"?t+"":t,e),e);import{d as $t,v as bs,M as et,l as K,L as Es,w as _s,x as zs,y as Pt,z as be,H as Cs,J as As,K as ls,t as Ms,S as as,e as Ts,c as Ss,i as Bs,j as Ps,k as Ns,X as Ee,Y as _e,B as ze,Z as Ce,_ as Is,P as Fs,O as Rs,W as qs,s as Vs}from"./three.module.89134fd5.js";import{O as Ls}from"./OrbitControls.4f0c683d.js";import"./stats.min.46d05fb3.js";import{F as ks}from"./FXAAShader.bc17685a.js";class st{constructor(t){t===void 0&&(t=[0,0,0,0,0,0,0,0,0]),this.elements=t}identity(){const t=this.elements;t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1}setZero(){const t=this.elements;t[0]=0,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=0,t[6]=0,t[7]=0,t[8]=0}setTrace(t){const e=this.elements;e[0]=t.x,e[4]=t.y,e[8]=t.z}getTrace(t){t===void 0&&(t=new d);const e=this.elements;return t.x=e[0],t.y=e[4],t.z=e[8],t}vmult(t,e){e===void 0&&(e=new d);const s=this.elements,n=t.x,i=t.y,o=t.z;return e.x=s[0]*n+s[1]*i+s[2]*o,e.y=s[3]*n+s[4]*i+s[5]*o,e.z=s[6]*n+s[7]*i+s[8]*o,e}smult(t){for(let e=0;e<this.elements.length;e++)this.elements[e]*=t}mmult(t,e){e===void 0&&(e=new st);const s=this.elements,n=t.elements,i=e.elements,o=s[0],r=s[1],l=s[2],a=s[3],h=s[4],u=s[5],c=s[6],f=s[7],p=s[8],m=n[0],v=n[1],y=n[2],w=n[3],x=n[4],E=n[5],_=n[6],C=n[7],T=n[8];return i[0]=o*m+r*w+l*_,i[1]=o*v+r*x+l*C,i[2]=o*y+r*E+l*T,i[3]=a*m+h*w+u*_,i[4]=a*v+h*x+u*C,i[5]=a*y+h*E+u*T,i[6]=c*m+f*w+p*_,i[7]=c*v+f*x+p*C,i[8]=c*y+f*E+p*T,e}scale(t,e){e===void 0&&(e=new st);const s=this.elements,n=e.elements;for(let i=0;i!==3;i++)n[3*i+0]=t.x*s[3*i+0],n[3*i+1]=t.y*s[3*i+1],n[3*i+2]=t.z*s[3*i+2];return e}solve(t,e){e===void 0&&(e=new d);const s=3,n=4,i=[];let o,r;for(o=0;o<s*n;o++)i.push(0);for(o=0;o<3;o++)for(r=0;r<3;r++)i[o+n*r]=this.elements[o+3*r];i[3+4*0]=t.x,i[3+4*1]=t.y,i[3+4*2]=t.z;let l=3;const a=l;let h;const u=4;let c;do{if(o=a-l,i[o+n*o]===0){for(r=o+1;r<a;r++)if(i[o+n*r]!==0){h=u;do c=u-h,i[c+n*o]+=i[c+n*r];while(--h);break}}if(i[o+n*o]!==0)for(r=o+1;r<a;r++){const f=i[o+n*r]/i[o+n*o];h=u;do c=u-h,i[c+n*r]=c<=o?0:i[c+n*r]-i[c+n*o]*f;while(--h)}}while(--l);if(e.z=i[2*n+3]/i[2*n+2],e.y=(i[1*n+3]-i[1*n+2]*e.z)/i[1*n+1],e.x=(i[0*n+3]-i[0*n+2]*e.z-i[0*n+1]*e.y)/i[0*n+0],isNaN(e.x)||isNaN(e.y)||isNaN(e.z)||e.x===1/0||e.y===1/0||e.z===1/0)throw`Could not solve equation! Got x=[${e.toString()}], b=[${t.toString()}], A=[${this.toString()}]`;return e}e(t,e,s){if(s===void 0)return this.elements[e+3*t];this.elements[e+3*t]=s}copy(t){for(let e=0;e<t.elements.length;e++)this.elements[e]=t.elements[e];return this}toString(){let t="";const e=",";for(let s=0;s<9;s++)t+=this.elements[s]+e;return t}reverse(t){t===void 0&&(t=new st);const e=3,s=6,n=js;let i,o;for(i=0;i<3;i++)for(o=0;o<3;o++)n[i+s*o]=this.elements[i+3*o];n[3+6*0]=1,n[3+6*1]=0,n[3+6*2]=0,n[4+6*0]=0,n[4+6*1]=1,n[4+6*2]=0,n[5+6*0]=0,n[5+6*1]=0,n[5+6*2]=1;let r=3;const l=r;let a;const h=s;let u;do{if(i=l-r,n[i+s*i]===0){for(o=i+1;o<l;o++)if(n[i+s*o]!==0){a=h;do u=h-a,n[u+s*i]+=n[u+s*o];while(--a);break}}if(n[i+s*i]!==0)for(o=i+1;o<l;o++){const c=n[i+s*o]/n[i+s*i];a=h;do u=h-a,n[u+s*o]=u<=i?0:n[u+s*o]-n[u+s*i]*c;while(--a)}}while(--r);i=2;do{o=i-1;do{const c=n[i+s*o]/n[i+s*i];a=s;do u=s-a,n[u+s*o]=n[u+s*o]-n[u+s*i]*c;while(--a)}while(o--)}while(--i);i=2;do{const c=1/n[i+s*i];a=s;do u=s-a,n[u+s*i]=n[u+s*i]*c;while(--a)}while(i--);i=2;do{o=2;do{if(u=n[e+o+s*i],isNaN(u)||u===1/0)throw`Could not reverse! A=[${this.toString()}]`;t.e(i,o,u)}while(o--)}while(i--);return t}setRotationFromQuaternion(t){const e=t.x,s=t.y,n=t.z,i=t.w,o=e+e,r=s+s,l=n+n,a=e*o,h=e*r,u=e*l,c=s*r,f=s*l,p=n*l,m=i*o,v=i*r,y=i*l,w=this.elements;return w[3*0+0]=1-(c+p),w[3*0+1]=h-y,w[3*0+2]=u+v,w[3*1+0]=h+y,w[3*1+1]=1-(a+p),w[3*1+2]=f-m,w[3*2+0]=u-v,w[3*2+1]=f+m,w[3*2+2]=1-(a+c),this}transpose(t){t===void 0&&(t=new st);const e=this.elements,s=t.elements;let n;return s[0]=e[0],s[4]=e[4],s[8]=e[8],n=e[1],s[1]=e[3],s[3]=n,n=e[2],s[2]=e[6],s[6]=n,n=e[5],s[5]=e[7],s[7]=n,t}}const js=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];class d{constructor(t,e,s){t===void 0&&(t=0),e===void 0&&(e=0),s===void 0&&(s=0),this.x=t,this.y=e,this.z=s}cross(t,e){e===void 0&&(e=new d);const s=t.x,n=t.y,i=t.z,o=this.x,r=this.y,l=this.z;return e.x=r*i-l*n,e.y=l*s-o*i,e.z=o*n-r*s,e}set(t,e,s){return this.x=t,this.y=e,this.z=s,this}setZero(){this.x=this.y=this.z=0}vadd(t,e){if(e)e.x=t.x+this.x,e.y=t.y+this.y,e.z=t.z+this.z;else return new d(this.x+t.x,this.y+t.y,this.z+t.z)}vsub(t,e){if(e)e.x=this.x-t.x,e.y=this.y-t.y,e.z=this.z-t.z;else return new d(this.x-t.x,this.y-t.y,this.z-t.z)}crossmat(){return new st([0,-this.z,this.y,this.z,0,-this.x,-this.y,this.x,0])}normalize(){const t=this.x,e=this.y,s=this.z,n=Math.sqrt(t*t+e*e+s*s);if(n>0){const i=1/n;this.x*=i,this.y*=i,this.z*=i}else this.x=0,this.y=0,this.z=0;return n}unit(t){t===void 0&&(t=new d);const e=this.x,s=this.y,n=this.z;let i=Math.sqrt(e*e+s*s+n*n);return i>0?(i=1/i,t.x=e*i,t.y=s*i,t.z=n*i):(t.x=1,t.y=0,t.z=0),t}length(){const t=this.x,e=this.y,s=this.z;return Math.sqrt(t*t+e*e+s*s)}lengthSquared(){return this.dot(this)}distanceTo(t){const e=this.x,s=this.y,n=this.z,i=t.x,o=t.y,r=t.z;return Math.sqrt((i-e)*(i-e)+(o-s)*(o-s)+(r-n)*(r-n))}distanceSquared(t){const e=this.x,s=this.y,n=this.z,i=t.x,o=t.y,r=t.z;return(i-e)*(i-e)+(o-s)*(o-s)+(r-n)*(r-n)}scale(t,e){e===void 0&&(e=new d);const s=this.x,n=this.y,i=this.z;return e.x=t*s,e.y=t*n,e.z=t*i,e}vmul(t,e){return e===void 0&&(e=new d),e.x=t.x*this.x,e.y=t.y*this.y,e.z=t.z*this.z,e}addScaledVector(t,e,s){return s===void 0&&(s=new d),s.x=this.x+t*e.x,s.y=this.y+t*e.y,s.z=this.z+t*e.z,s}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}isZero(){return this.x===0&&this.y===0&&this.z===0}negate(t){return t===void 0&&(t=new d),t.x=-this.x,t.y=-this.y,t.z=-this.z,t}tangents(t,e){const s=this.length();if(s>0){const n=Os,i=1/s;n.set(this.x*i,this.y*i,this.z*i);const o=Ws;Math.abs(n.x)<.9?(o.set(1,0,0),n.cross(o,t)):(o.set(0,1,0),n.cross(o,t)),n.cross(t,e)}else t.set(1,0,0),e.set(0,1,0)}toString(){return`${this.x},${this.y},${this.z}`}toArray(){return[this.x,this.y,this.z]}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}lerp(t,e,s){const n=this.x,i=this.y,o=this.z;s.x=n+(t.x-n)*e,s.y=i+(t.y-i)*e,s.z=o+(t.z-o)*e}almostEquals(t,e){return e===void 0&&(e=1e-6),!(Math.abs(this.x-t.x)>e||Math.abs(this.y-t.y)>e||Math.abs(this.z-t.z)>e)}almostZero(t){return t===void 0&&(t=1e-6),!(Math.abs(this.x)>t||Math.abs(this.y)>t||Math.abs(this.z)>t)}isAntiparallelTo(t,e){return this.negate(Ae),Ae.almostEquals(t,e)}clone(){return new d(this.x,this.y,this.z)}}d.ZERO=new d(0,0,0);d.UNIT_X=new d(1,0,0);d.UNIT_Y=new d(0,1,0);d.UNIT_Z=new d(0,0,1);const Os=new d,Ws=new d,Ae=new d;class G{constructor(t){t===void 0&&(t={}),this.lowerBound=new d,this.upperBound=new d,t.lowerBound&&this.lowerBound.copy(t.lowerBound),t.upperBound&&this.upperBound.copy(t.upperBound)}setFromPoints(t,e,s,n){const i=this.lowerBound,o=this.upperBound,r=s;i.copy(t[0]),r&&r.vmult(i,i),o.copy(i);for(let l=1;l<t.length;l++){let a=t[l];r&&(r.vmult(a,Me),a=Me),a.x>o.x&&(o.x=a.x),a.x<i.x&&(i.x=a.x),a.y>o.y&&(o.y=a.y),a.y<i.y&&(i.y=a.y),a.z>o.z&&(o.z=a.z),a.z<i.z&&(i.z=a.z)}return e&&(e.vadd(i,i),e.vadd(o,o)),n&&(i.x-=n,i.y-=n,i.z-=n,o.x+=n,o.y+=n,o.z+=n),this}copy(t){return this.lowerBound.copy(t.lowerBound),this.upperBound.copy(t.upperBound),this}clone(){return new G().copy(this)}extend(t){this.lowerBound.x=Math.min(this.lowerBound.x,t.lowerBound.x),this.upperBound.x=Math.max(this.upperBound.x,t.upperBound.x),this.lowerBound.y=Math.min(this.lowerBound.y,t.lowerBound.y),this.upperBound.y=Math.max(this.upperBound.y,t.upperBound.y),this.lowerBound.z=Math.min(this.lowerBound.z,t.lowerBound.z),this.upperBound.z=Math.max(this.upperBound.z,t.upperBound.z)}overlaps(t){const e=this.lowerBound,s=this.upperBound,n=t.lowerBound,i=t.upperBound,o=n.x<=s.x&&s.x<=i.x||e.x<=i.x&&i.x<=s.x,r=n.y<=s.y&&s.y<=i.y||e.y<=i.y&&i.y<=s.y,l=n.z<=s.z&&s.z<=i.z||e.z<=i.z&&i.z<=s.z;return o&&r&&l}volume(){const t=this.lowerBound,e=this.upperBound;return(e.x-t.x)*(e.y-t.y)*(e.z-t.z)}contains(t){const e=this.lowerBound,s=this.upperBound,n=t.lowerBound,i=t.upperBound;return e.x<=n.x&&s.x>=i.x&&e.y<=n.y&&s.y>=i.y&&e.z<=n.z&&s.z>=i.z}getCorners(t,e,s,n,i,o,r,l){const a=this.lowerBound,h=this.upperBound;t.copy(a),e.set(h.x,a.y,a.z),s.set(h.x,h.y,a.z),n.set(a.x,h.y,h.z),i.set(h.x,a.y,h.z),o.set(a.x,h.y,a.z),r.set(a.x,a.y,h.z),l.copy(h)}toLocalFrame(t,e){const s=Te,n=s[0],i=s[1],o=s[2],r=s[3],l=s[4],a=s[5],h=s[6],u=s[7];this.getCorners(n,i,o,r,l,a,h,u);for(let c=0;c!==8;c++){const f=s[c];t.pointToLocal(f,f)}return e.setFromPoints(s)}toWorldFrame(t,e){const s=Te,n=s[0],i=s[1],o=s[2],r=s[3],l=s[4],a=s[5],h=s[6],u=s[7];this.getCorners(n,i,o,r,l,a,h,u);for(let c=0;c!==8;c++){const f=s[c];t.pointToWorld(f,f)}return e.setFromPoints(s)}overlapsRay(t){const{direction:e,from:s}=t,n=1/e.x,i=1/e.y,o=1/e.z,r=(this.lowerBound.x-s.x)*n,l=(this.upperBound.x-s.x)*n,a=(this.lowerBound.y-s.y)*i,h=(this.upperBound.y-s.y)*i,u=(this.lowerBound.z-s.z)*o,c=(this.upperBound.z-s.z)*o,f=Math.max(Math.max(Math.min(r,l),Math.min(a,h)),Math.min(u,c)),p=Math.min(Math.min(Math.max(r,l),Math.max(a,h)),Math.max(u,c));return!(p<0||f>p)}}const Me=new d,Te=[new d,new d,new d,new d,new d,new d,new d,new d];class Se{constructor(){this.matrix=[]}get(t,e){let{index:s}=t,{index:n}=e;if(n>s){const i=n;n=s,s=i}return this.matrix[(s*(s+1)>>1)+n-1]}set(t,e,s){let{index:n}=t,{index:i}=e;if(i>n){const o=i;i=n,n=o}this.matrix[(n*(n+1)>>1)+i-1]=s?1:0}reset(){for(let t=0,e=this.matrix.length;t!==e;t++)this.matrix[t]=0}setNumObjects(t){this.matrix.length=t*(t-1)>>1}}class cs{addEventListener(t,e){this._listeners===void 0&&(this._listeners={});const s=this._listeners;return s[t]===void 0&&(s[t]=[]),s[t].includes(e)||s[t].push(e),this}hasEventListener(t,e){if(this._listeners===void 0)return!1;const s=this._listeners;return!!(s[t]!==void 0&&s[t].includes(e))}hasAnyEventListener(t){return this._listeners===void 0?!1:this._listeners[t]!==void 0}removeEventListener(t,e){if(this._listeners===void 0)return this;const s=this._listeners;if(s[t]===void 0)return this;const n=s[t].indexOf(e);return n!==-1&&s[t].splice(n,1),this}dispatchEvent(t){if(this._listeners===void 0)return this;const s=this._listeners[t.type];if(s!==void 0){t.target=this;for(let n=0,i=s.length;n<i;n++)s[n].call(this,t)}return this}}class D{constructor(t,e,s,n){t===void 0&&(t=0),e===void 0&&(e=0),s===void 0&&(s=0),n===void 0&&(n=1),this.x=t,this.y=e,this.z=s,this.w=n}set(t,e,s,n){return this.x=t,this.y=e,this.z=s,this.w=n,this}toString(){return`${this.x},${this.y},${this.z},${this.w}`}toArray(){return[this.x,this.y,this.z,this.w]}setFromAxisAngle(t,e){const s=Math.sin(e*.5);return this.x=t.x*s,this.y=t.y*s,this.z=t.z*s,this.w=Math.cos(e*.5),this}toAxisAngle(t){t===void 0&&(t=new d),this.normalize();const e=2*Math.acos(this.w),s=Math.sqrt(1-this.w*this.w);return s<.001?(t.x=this.x,t.y=this.y,t.z=this.z):(t.x=this.x/s,t.y=this.y/s,t.z=this.z/s),[t,e]}setFromVectors(t,e){if(t.isAntiparallelTo(e)){const s=Hs,n=Gs;t.tangents(s,n),this.setFromAxisAngle(s,Math.PI)}else{const s=t.cross(e);this.x=s.x,this.y=s.y,this.z=s.z,this.w=Math.sqrt(t.length()**2*e.length()**2)+t.dot(e),this.normalize()}return this}mult(t,e){e===void 0&&(e=new D);const s=this.x,n=this.y,i=this.z,o=this.w,r=t.x,l=t.y,a=t.z,h=t.w;return e.x=s*h+o*r+n*a-i*l,e.y=n*h+o*l+i*r-s*a,e.z=i*h+o*a+s*l-n*r,e.w=o*h-s*r-n*l-i*a,e}inverse(t){t===void 0&&(t=new D);const e=this.x,s=this.y,n=this.z,i=this.w;this.conjugate(t);const o=1/(e*e+s*s+n*n+i*i);return t.x*=o,t.y*=o,t.z*=o,t.w*=o,t}conjugate(t){return t===void 0&&(t=new D),t.x=-this.x,t.y=-this.y,t.z=-this.z,t.w=this.w,t}normalize(){let t=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return t===0?(this.x=0,this.y=0,this.z=0,this.w=0):(t=1/t,this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}normalizeFast(){const t=(3-(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w))/2;return t===0?(this.x=0,this.y=0,this.z=0,this.w=0):(this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}vmult(t,e){e===void 0&&(e=new d);const s=t.x,n=t.y,i=t.z,o=this.x,r=this.y,l=this.z,a=this.w,h=a*s+r*i-l*n,u=a*n+l*s-o*i,c=a*i+o*n-r*s,f=-o*s-r*n-l*i;return e.x=h*a+f*-o+u*-l-c*-r,e.y=u*a+f*-r+c*-o-h*-l,e.z=c*a+f*-l+h*-r-u*-o,e}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w,this}toEuler(t,e){e===void 0&&(e="YZX");let s,n,i;const o=this.x,r=this.y,l=this.z,a=this.w;switch(e){case"YZX":const h=o*r+l*a;if(h>.499&&(s=2*Math.atan2(o,a),n=Math.PI/2,i=0),h<-.499&&(s=-2*Math.atan2(o,a),n=-Math.PI/2,i=0),s===void 0){const u=o*o,c=r*r,f=l*l;s=Math.atan2(2*r*a-2*o*l,1-2*c-2*f),n=Math.asin(2*h),i=Math.atan2(2*o*a-2*r*l,1-2*u-2*f)}break;default:throw new Error(`Euler order ${e} not supported yet.`)}t.y=s,t.z=n,t.x=i}setFromEuler(t,e,s,n){n===void 0&&(n="XYZ");const i=Math.cos(t/2),o=Math.cos(e/2),r=Math.cos(s/2),l=Math.sin(t/2),a=Math.sin(e/2),h=Math.sin(s/2);return n==="XYZ"?(this.x=l*o*r+i*a*h,this.y=i*a*r-l*o*h,this.z=i*o*h+l*a*r,this.w=i*o*r-l*a*h):n==="YXZ"?(this.x=l*o*r+i*a*h,this.y=i*a*r-l*o*h,this.z=i*o*h-l*a*r,this.w=i*o*r+l*a*h):n==="ZXY"?(this.x=l*o*r-i*a*h,this.y=i*a*r+l*o*h,this.z=i*o*h+l*a*r,this.w=i*o*r-l*a*h):n==="ZYX"?(this.x=l*o*r-i*a*h,this.y=i*a*r+l*o*h,this.z=i*o*h-l*a*r,this.w=i*o*r+l*a*h):n==="YZX"?(this.x=l*o*r+i*a*h,this.y=i*a*r+l*o*h,this.z=i*o*h-l*a*r,this.w=i*o*r-l*a*h):n==="XZY"&&(this.x=l*o*r-i*a*h,this.y=i*a*r-l*o*h,this.z=i*o*h+l*a*r,this.w=i*o*r+l*a*h),this}clone(){return new D(this.x,this.y,this.z,this.w)}slerp(t,e,s){s===void 0&&(s=new D);const n=this.x,i=this.y,o=this.z,r=this.w;let l=t.x,a=t.y,h=t.z,u=t.w,c,f,p,m,v;return f=n*l+i*a+o*h+r*u,f<0&&(f=-f,l=-l,a=-a,h=-h,u=-u),1-f>1e-6?(c=Math.acos(f),p=Math.sin(c),m=Math.sin((1-e)*c)/p,v=Math.sin(e*c)/p):(m=1-e,v=e),s.x=m*n+v*l,s.y=m*i+v*a,s.z=m*o+v*h,s.w=m*r+v*u,s}integrate(t,e,s,n){n===void 0&&(n=new D);const i=t.x*s.x,o=t.y*s.y,r=t.z*s.z,l=this.x,a=this.y,h=this.z,u=this.w,c=e*.5;return n.x+=c*(i*u+o*h-r*a),n.y+=c*(o*u+r*l-i*h),n.z+=c*(r*u+i*a-o*l),n.w+=c*(-i*l-o*a-r*h),n}}const Hs=new d,Gs=new d,Ds={SPHERE:1,PLANE:2,BOX:4,COMPOUND:8,CONVEXPOLYHEDRON:16,HEIGHTFIELD:32,PARTICLE:64,CYLINDER:128,TRIMESH:256};class P{constructor(t){t===void 0&&(t={}),this.id=P.idCounter++,this.type=t.type||0,this.boundingSphereRadius=0,this.collisionResponse=t.collisionResponse?t.collisionResponse:!0,this.collisionFilterGroup=t.collisionFilterGroup!==void 0?t.collisionFilterGroup:1,this.collisionFilterMask=t.collisionFilterMask!==void 0?t.collisionFilterMask:-1,this.material=t.material?t.material:null,this.body=null}updateBoundingSphereRadius(){throw`computeBoundingSphereRadius() not implemented for shape type ${this.type}`}volume(){throw`volume() not implemented for shape type ${this.type}`}calculateLocalInertia(t,e){throw`calculateLocalInertia() not implemented for shape type ${this.type}`}calculateWorldAABB(t,e,s,n){throw`calculateWorldAABB() not implemented for shape type ${this.type}`}}P.idCounter=0;P.types=Ds;class O{constructor(t){t===void 0&&(t={}),this.position=new d,this.quaternion=new D,t.position&&this.position.copy(t.position),t.quaternion&&this.quaternion.copy(t.quaternion)}pointToLocal(t,e){return O.pointToLocalFrame(this.position,this.quaternion,t,e)}pointToWorld(t,e){return O.pointToWorldFrame(this.position,this.quaternion,t,e)}vectorToWorldFrame(t,e){return e===void 0&&(e=new d),this.quaternion.vmult(t,e),e}static pointToLocalFrame(t,e,s,n){return n===void 0&&(n=new d),s.vsub(t,n),e.conjugate(Be),Be.vmult(n,n),n}static pointToWorldFrame(t,e,s,n){return n===void 0&&(n=new d),e.vmult(s,n),n.vadd(t,n),n}static vectorToWorldFrame(t,e,s){return s===void 0&&(s=new d),t.vmult(e,s),s}static vectorToLocalFrame(t,e,s,n){return n===void 0&&(n=new d),e.w*=-1,e.vmult(s,n),e.w*=-1,n}}const Be=new D;class dt extends P{constructor(t){t===void 0&&(t={});const{vertices:e=[],faces:s=[],normals:n=[],axes:i,boundingSphereRadius:o}=t;super({type:P.types.CONVEXPOLYHEDRON}),this.vertices=e,this.faces=s,this.faceNormals=n,this.faceNormals.length===0&&this.computeNormals(),o?this.boundingSphereRadius=o:this.updateBoundingSphereRadius(),this.worldVertices=[],this.worldVerticesNeedsUpdate=!0,this.worldFaceNormals=[],this.worldFaceNormalsNeedsUpdate=!0,this.uniqueAxes=i?i.slice():null,this.uniqueEdges=[],this.computeEdges()}computeEdges(){const t=this.faces,e=this.vertices,s=this.uniqueEdges;s.length=0;const n=new d;for(let i=0;i!==t.length;i++){const o=t[i],r=o.length;for(let l=0;l!==r;l++){const a=(l+1)%r;e[o[l]].vsub(e[o[a]],n),n.normalize();let h=!1;for(let u=0;u!==s.length;u++)if(s[u].almostEquals(n)||s[u].almostEquals(n)){h=!0;break}h||s.push(n.clone())}}}computeNormals(){this.faceNormals.length=this.faces.length;for(let t=0;t<this.faces.length;t++){for(let n=0;n<this.faces[t].length;n++)if(!this.vertices[this.faces[t][n]])throw new Error(`Vertex ${this.faces[t][n]} not found!`);const e=this.faceNormals[t]||new d;this.getFaceNormal(t,e),e.negate(e),this.faceNormals[t]=e;const s=this.vertices[this.faces[t][0]];if(e.dot(s)<0){console.error(`.faceNormals[${t}] = Vec3(${e.toString()}) looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.`);for(let n=0;n<this.faces[t].length;n++)console.warn(`.vertices[${this.faces[t][n]}] = Vec3(${this.vertices[this.faces[t][n]].toString()})`)}}}getFaceNormal(t,e){const s=this.faces[t],n=this.vertices[s[0]],i=this.vertices[s[1]],o=this.vertices[s[2]];dt.computeNormal(n,i,o,e)}static computeNormal(t,e,s,n){const i=new d,o=new d;e.vsub(t,o),s.vsub(e,i),i.cross(o,n),n.isZero()||n.normalize()}clipAgainstHull(t,e,s,n,i,o,r,l,a){const h=new d;let u=-1,c=-Number.MAX_VALUE;for(let p=0;p<s.faces.length;p++){h.copy(s.faceNormals[p]),i.vmult(h,h);const m=h.dot(o);m>c&&(c=m,u=p)}const f=[];for(let p=0;p<s.faces[u].length;p++){const m=s.vertices[s.faces[u][p]],v=new d;v.copy(m),i.vmult(v,v),n.vadd(v,v),f.push(v)}u>=0&&this.clipFaceAgainstHull(o,t,e,f,r,l,a)}findSeparatingAxis(t,e,s,n,i,o,r,l){const a=new d,h=new d,u=new d,c=new d,f=new d,p=new d;let m=Number.MAX_VALUE;const v=this;if(v.uniqueAxes)for(let y=0;y!==v.uniqueAxes.length;y++){s.vmult(v.uniqueAxes[y],a);const w=v.testSepAxis(a,t,e,s,n,i);if(w===!1)return!1;w<m&&(m=w,o.copy(a))}else{const y=r?r.length:v.faces.length;for(let w=0;w<y;w++){const x=r?r[w]:w;a.copy(v.faceNormals[x]),s.vmult(a,a);const E=v.testSepAxis(a,t,e,s,n,i);if(E===!1)return!1;E<m&&(m=E,o.copy(a))}}if(t.uniqueAxes)for(let y=0;y!==t.uniqueAxes.length;y++){i.vmult(t.uniqueAxes[y],h);const w=v.testSepAxis(h,t,e,s,n,i);if(w===!1)return!1;w<m&&(m=w,o.copy(h))}else{const y=l?l.length:t.faces.length;for(let w=0;w<y;w++){const x=l?l[w]:w;h.copy(t.faceNormals[x]),i.vmult(h,h);const E=v.testSepAxis(h,t,e,s,n,i);if(E===!1)return!1;E<m&&(m=E,o.copy(h))}}for(let y=0;y!==v.uniqueEdges.length;y++){s.vmult(v.uniqueEdges[y],c);for(let w=0;w!==t.uniqueEdges.length;w++)if(i.vmult(t.uniqueEdges[w],f),c.cross(f,p),!p.almostZero()){p.normalize();const x=v.testSepAxis(p,t,e,s,n,i);if(x===!1)return!1;x<m&&(m=x,o.copy(p))}}return n.vsub(e,u),u.dot(o)>0&&o.negate(o),!0}testSepAxis(t,e,s,n,i,o){const r=this;dt.project(r,t,s,n,se),dt.project(e,t,i,o,ne);const l=se[0],a=se[1],h=ne[0],u=ne[1];if(l<u||h<a)return!1;const c=l-u,f=h-a;return c<f?c:f}calculateLocalInertia(t,e){const s=new d,n=new d;this.computeLocalAABB(n,s);const i=s.x-n.x,o=s.y-n.y,r=s.z-n.z;e.x=1/12*t*(2*o*2*o+2*r*2*r),e.y=1/12*t*(2*i*2*i+2*r*2*r),e.z=1/12*t*(2*o*2*o+2*i*2*i)}getPlaneConstantOfFace(t){const e=this.faces[t],s=this.faceNormals[t],n=this.vertices[e[0]];return-s.dot(n)}clipFaceAgainstHull(t,e,s,n,i,o,r){const l=new d,a=new d,h=new d,u=new d,c=new d,f=new d,p=new d,m=new d,v=this,y=[],w=n,x=y;let E=-1,_=Number.MAX_VALUE;for(let z=0;z<v.faces.length;z++){l.copy(v.faceNormals[z]),s.vmult(l,l);const S=l.dot(t);S<_&&(_=S,E=z)}if(E<0)return;const C=v.faces[E];C.connectedFaces=[];for(let z=0;z<v.faces.length;z++)for(let S=0;S<v.faces[z].length;S++)C.indexOf(v.faces[z][S])!==-1&&z!==E&&C.connectedFaces.indexOf(z)===-1&&C.connectedFaces.push(z);const T=C.length;for(let z=0;z<T;z++){const S=v.vertices[C[z]],I=v.vertices[C[(z+1)%T]];S.vsub(I,a),h.copy(a),s.vmult(h,h),e.vadd(h,h),u.copy(this.faceNormals[E]),s.vmult(u,u),e.vadd(u,u),h.cross(u,c),c.negate(c),f.copy(S),s.vmult(f,f),e.vadd(f,f);const b=C.connectedFaces[z];p.copy(this.faceNormals[b]);const M=this.getPlaneConstantOfFace(b);m.copy(p),s.vmult(m,m);const B=M-m.dot(e);for(this.clipFaceAgainstPlane(w,x,m,B);w.length;)w.shift();for(;x.length;)w.push(x.shift())}p.copy(this.faceNormals[E]);const N=this.getPlaneConstantOfFace(E);m.copy(p),s.vmult(m,m);const R=N-m.dot(e);for(let z=0;z<w.length;z++){let S=m.dot(w[z])+R;if(S<=i&&(console.log(`clamped: depth=${S} to minDist=${i}`),S=i),S<=o){const I=w[z];if(S<=1e-6){const b={point:I,normal:m,depth:S};r.push(b)}}}}clipFaceAgainstPlane(t,e,s,n){let i,o;const r=t.length;if(r<2)return e;let l=t[t.length-1],a=t[0];i=s.dot(l)+n;for(let h=0;h<r;h++){if(a=t[h],o=s.dot(a)+n,i<0)if(o<0){const u=new d;u.copy(a),e.push(u)}else{const u=new d;l.lerp(a,i/(i-o),u),e.push(u)}else if(o<0){const u=new d;l.lerp(a,i/(i-o),u),e.push(u),e.push(a)}l=a,i=o}return e}computeWorldVertices(t,e){for(;this.worldVertices.length<this.vertices.length;)this.worldVertices.push(new d);const s=this.vertices,n=this.worldVertices;for(let i=0;i!==this.vertices.length;i++)e.vmult(s[i],n[i]),t.vadd(n[i],n[i]);this.worldVerticesNeedsUpdate=!1}computeLocalAABB(t,e){const s=this.vertices;t.set(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),e.set(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE);for(let n=0;n<this.vertices.length;n++){const i=s[n];i.x<t.x?t.x=i.x:i.x>e.x&&(e.x=i.x),i.y<t.y?t.y=i.y:i.y>e.y&&(e.y=i.y),i.z<t.z?t.z=i.z:i.z>e.z&&(e.z=i.z)}}computeWorldFaceNormals(t){const e=this.faceNormals.length;for(;this.worldFaceNormals.length<e;)this.worldFaceNormals.push(new d);const s=this.faceNormals,n=this.worldFaceNormals;for(let i=0;i!==e;i++)t.vmult(s[i],n[i]);this.worldFaceNormalsNeedsUpdate=!1}updateBoundingSphereRadius(){let t=0;const e=this.vertices;for(let s=0;s!==e.length;s++){const n=e[s].lengthSquared();n>t&&(t=n)}this.boundingSphereRadius=Math.sqrt(t)}calculateWorldAABB(t,e,s,n){const i=this.vertices;let o,r,l,a,h,u,c=new d;for(let f=0;f<i.length;f++){c.copy(i[f]),e.vmult(c,c),t.vadd(c,c);const p=c;(o===void 0||p.x<o)&&(o=p.x),(a===void 0||p.x>a)&&(a=p.x),(r===void 0||p.y<r)&&(r=p.y),(h===void 0||p.y>h)&&(h=p.y),(l===void 0||p.z<l)&&(l=p.z),(u===void 0||p.z>u)&&(u=p.z)}s.set(o,r,l),n.set(a,h,u)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}getAveragePointLocal(t){t===void 0&&(t=new d);const e=this.vertices;for(let s=0;s<e.length;s++)t.vadd(e[s],t);return t.scale(1/e.length,t),t}transformAllPoints(t,e){const s=this.vertices.length,n=this.vertices;if(e){for(let i=0;i<s;i++){const o=n[i];e.vmult(o,o)}for(let i=0;i<this.faceNormals.length;i++){const o=this.faceNormals[i];e.vmult(o,o)}}if(t)for(let i=0;i<s;i++){const o=n[i];o.vadd(t,o)}}pointIsInside(t){const e=this.vertices,s=this.faces,n=this.faceNormals,i=null,o=new d;this.getAveragePointLocal(o);for(let r=0;r<this.faces.length;r++){let l=n[r];const a=e[s[r][0]],h=new d;t.vsub(a,h);const u=l.dot(h),c=new d;o.vsub(a,c);const f=l.dot(c);if(u<0&&f>0||u>0&&f<0)return!1}return i?1:-1}static project(t,e,s,n,i){const o=t.vertices.length,r=Ys;let l=0,a=0;const h=$s,u=t.vertices;h.setZero(),O.vectorToLocalFrame(s,n,e,r),O.pointToLocalFrame(s,n,h,h);const c=h.dot(r);a=l=u[0].dot(r);for(let f=1;f<o;f++){const p=u[f].dot(r);p>l&&(l=p),p<a&&(a=p)}if(a-=c,l-=c,a>l){const f=a;a=l,l=f}i[0]=l,i[1]=a}}const se=[],ne=[],Us=new d,Ys=new d,$s=new d;class Zt extends P{constructor(t){super({type:P.types.BOX}),this.halfExtents=t,this.convexPolyhedronRepresentation=null,this.updateConvexPolyhedronRepresentation(),this.updateBoundingSphereRadius()}updateConvexPolyhedronRepresentation(){const t=this.halfExtents.x,e=this.halfExtents.y,s=this.halfExtents.z,n=d,i=[new n(-t,-e,-s),new n(t,-e,-s),new n(t,e,-s),new n(-t,e,-s),new n(-t,-e,s),new n(t,-e,s),new n(t,e,s),new n(-t,e,s)],o=[[3,2,1,0],[4,5,6,7],[5,4,0,1],[2,3,7,6],[0,4,7,3],[1,2,6,5]],r=[new n(0,0,1),new n(0,1,0),new n(1,0,0)],l=new dt({vertices:i,faces:o,axes:r});this.convexPolyhedronRepresentation=l,l.material=this.material}calculateLocalInertia(t,e){return e===void 0&&(e=new d),Zt.calculateInertia(this.halfExtents,t,e),e}static calculateInertia(t,e,s){const n=t;s.x=1/12*e*(2*n.y*2*n.y+2*n.z*2*n.z),s.y=1/12*e*(2*n.x*2*n.x+2*n.z*2*n.z),s.z=1/12*e*(2*n.y*2*n.y+2*n.x*2*n.x)}getSideNormals(t,e){const s=t,n=this.halfExtents;if(s[0].set(n.x,0,0),s[1].set(0,n.y,0),s[2].set(0,0,n.z),s[3].set(-n.x,0,0),s[4].set(0,-n.y,0),s[5].set(0,0,-n.z),e!==void 0)for(let i=0;i!==s.length;i++)e.vmult(s[i],s[i]);return s}volume(){return 8*this.halfExtents.x*this.halfExtents.y*this.halfExtents.z}updateBoundingSphereRadius(){this.boundingSphereRadius=this.halfExtents.length()}forEachWorldCorner(t,e,s){const n=this.halfExtents,i=[[n.x,n.y,n.z],[-n.x,n.y,n.z],[-n.x,-n.y,n.z],[-n.x,-n.y,-n.z],[n.x,-n.y,-n.z],[n.x,n.y,-n.z],[-n.x,n.y,-n.z],[n.x,-n.y,n.z]];for(let o=0;o<i.length;o++)pt.set(i[o][0],i[o][1],i[o][2]),e.vmult(pt,pt),t.vadd(pt,pt),s(pt.x,pt.y,pt.z)}calculateWorldAABB(t,e,s,n){const i=this.halfExtents;nt[0].set(i.x,i.y,i.z),nt[1].set(-i.x,i.y,i.z),nt[2].set(-i.x,-i.y,i.z),nt[3].set(-i.x,-i.y,-i.z),nt[4].set(i.x,-i.y,-i.z),nt[5].set(i.x,i.y,-i.z),nt[6].set(-i.x,i.y,-i.z),nt[7].set(i.x,-i.y,i.z);const o=nt[0];e.vmult(o,o),t.vadd(o,o),n.copy(o),s.copy(o);for(let r=1;r<8;r++){const l=nt[r];e.vmult(l,l),t.vadd(l,l);const a=l.x,h=l.y,u=l.z;a>n.x&&(n.x=a),h>n.y&&(n.y=h),u>n.z&&(n.z=u),a<s.x&&(s.x=a),h<s.y&&(s.y=h),u<s.z&&(s.z=u)}}}const pt=new d,nt=[new d,new d,new d,new d,new d,new d,new d,new d],we={DYNAMIC:1,STATIC:2,KINEMATIC:4},ve={AWAKE:0,SLEEPY:1,SLEEPING:2};class F extends cs{constructor(t){t===void 0&&(t={}),super(),this.id=F.idCounter++,this.index=-1,this.world=null,this.vlambda=new d,this.collisionFilterGroup=typeof t.collisionFilterGroup=="number"?t.collisionFilterGroup:1,this.collisionFilterMask=typeof t.collisionFilterMask=="number"?t.collisionFilterMask:-1,this.collisionResponse=typeof t.collisionResponse=="boolean"?t.collisionResponse:!0,this.position=new d,this.previousPosition=new d,this.interpolatedPosition=new d,this.initPosition=new d,t.position&&(this.position.copy(t.position),this.previousPosition.copy(t.position),this.interpolatedPosition.copy(t.position),this.initPosition.copy(t.position)),this.velocity=new d,t.velocity&&this.velocity.copy(t.velocity),this.initVelocity=new d,this.force=new d;const e=typeof t.mass=="number"?t.mass:0;this.mass=e,this.invMass=e>0?1/e:0,this.material=t.material||null,this.linearDamping=typeof t.linearDamping=="number"?t.linearDamping:.01,this.type=e<=0?F.STATIC:F.DYNAMIC,typeof t.type==typeof F.STATIC&&(this.type=t.type),this.allowSleep=typeof t.allowSleep<"u"?t.allowSleep:!0,this.sleepState=F.AWAKE,this.sleepSpeedLimit=typeof t.sleepSpeedLimit<"u"?t.sleepSpeedLimit:.1,this.sleepTimeLimit=typeof t.sleepTimeLimit<"u"?t.sleepTimeLimit:1,this.timeLastSleepy=0,this.wakeUpAfterNarrowphase=!1,this.torque=new d,this.quaternion=new D,this.initQuaternion=new D,this.previousQuaternion=new D,this.interpolatedQuaternion=new D,t.quaternion&&(this.quaternion.copy(t.quaternion),this.initQuaternion.copy(t.quaternion),this.previousQuaternion.copy(t.quaternion),this.interpolatedQuaternion.copy(t.quaternion)),this.angularVelocity=new d,t.angularVelocity&&this.angularVelocity.copy(t.angularVelocity),this.initAngularVelocity=new d,this.shapes=[],this.shapeOffsets=[],this.shapeOrientations=[],this.inertia=new d,this.invInertia=new d,this.invInertiaWorld=new st,this.invMassSolve=0,this.invInertiaSolve=new d,this.invInertiaWorldSolve=new st,this.fixedRotation=typeof t.fixedRotation<"u"?t.fixedRotation:!1,this.angularDamping=typeof t.angularDamping<"u"?t.angularDamping:.01,this.linearFactor=new d(1,1,1),t.linearFactor&&this.linearFactor.copy(t.linearFactor),this.angularFactor=new d(1,1,1),t.angularFactor&&this.angularFactor.copy(t.angularFactor),this.aabb=new G,this.aabbNeedsUpdate=!0,this.boundingRadius=0,this.wlambda=new d,this.isTrigger=Boolean(t.isTrigger),t.shape&&this.addShape(t.shape),this.updateMassProperties()}wakeUp(){const t=this.sleepState;this.sleepState=F.AWAKE,this.wakeUpAfterNarrowphase=!1,t===F.SLEEPING&&this.dispatchEvent(F.wakeupEvent)}sleep(){this.sleepState=F.SLEEPING,this.velocity.set(0,0,0),this.angularVelocity.set(0,0,0),this.wakeUpAfterNarrowphase=!1}sleepTick(t){if(this.allowSleep){const e=this.sleepState,s=this.velocity.lengthSquared()+this.angularVelocity.lengthSquared(),n=this.sleepSpeedLimit**2;e===F.AWAKE&&s<n?(this.sleepState=F.SLEEPY,this.timeLastSleepy=t,this.dispatchEvent(F.sleepyEvent)):e===F.SLEEPY&&s>n?this.wakeUp():e===F.SLEEPY&&t-this.timeLastSleepy>this.sleepTimeLimit&&(this.sleep(),this.dispatchEvent(F.sleepEvent))}}updateSolveMassProperties(){this.sleepState===F.SLEEPING||this.type===F.KINEMATIC?(this.invMassSolve=0,this.invInertiaSolve.setZero(),this.invInertiaWorldSolve.setZero()):(this.invMassSolve=this.invMass,this.invInertiaSolve.copy(this.invInertia),this.invInertiaWorldSolve.copy(this.invInertiaWorld))}pointToLocalFrame(t,e){return e===void 0&&(e=new d),t.vsub(this.position,e),this.quaternion.conjugate().vmult(e,e),e}vectorToLocalFrame(t,e){return e===void 0&&(e=new d),this.quaternion.conjugate().vmult(t,e),e}pointToWorldFrame(t,e){return e===void 0&&(e=new d),this.quaternion.vmult(t,e),e.vadd(this.position,e),e}vectorToWorldFrame(t,e){return e===void 0&&(e=new d),this.quaternion.vmult(t,e),e}addShape(t,e,s){const n=new d,i=new D;return e&&n.copy(e),s&&i.copy(s),this.shapes.push(t),this.shapeOffsets.push(n),this.shapeOrientations.push(i),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=this,this}removeShape(t){const e=this.shapes.indexOf(t);return e===-1?(console.warn("Shape does not belong to the body"),this):(this.shapes.splice(e,1),this.shapeOffsets.splice(e,1),this.shapeOrientations.splice(e,1),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=null,this)}updateBoundingRadius(){const t=this.shapes,e=this.shapeOffsets,s=t.length;let n=0;for(let i=0;i!==s;i++){const o=t[i];o.updateBoundingSphereRadius();const r=e[i].length(),l=o.boundingSphereRadius;r+l>n&&(n=r+l)}this.boundingRadius=n}updateAABB(){const t=this.shapes,e=this.shapeOffsets,s=this.shapeOrientations,n=t.length,i=Xs,o=Ks,r=this.quaternion,l=this.aabb,a=Zs;for(let h=0;h!==n;h++){const u=t[h];r.vmult(e[h],i),i.vadd(this.position,i),r.mult(s[h],o),u.calculateWorldAABB(i,o,a.lowerBound,a.upperBound),h===0?l.copy(a):l.extend(a)}this.aabbNeedsUpdate=!1}updateInertiaWorld(t){const e=this.invInertia;if(!(e.x===e.y&&e.y===e.z&&!t)){const s=Qs,n=Js;s.setRotationFromQuaternion(this.quaternion),s.transpose(n),s.scale(e,s),s.mmult(n,this.invInertiaWorld)}}applyForce(t,e){if(e===void 0&&(e=new d),this.type!==F.DYNAMIC)return;this.sleepState===F.SLEEPING&&this.wakeUp();const s=en;e.cross(t,s),this.force.vadd(t,this.force),this.torque.vadd(s,this.torque)}applyLocalForce(t,e){if(e===void 0&&(e=new d),this.type!==F.DYNAMIC)return;const s=sn,n=nn;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,n),this.applyForce(s,n)}applyTorque(t){this.type===F.DYNAMIC&&(this.sleepState===F.SLEEPING&&this.wakeUp(),this.torque.vadd(t,this.torque))}applyImpulse(t,e){if(e===void 0&&(e=new d),this.type!==F.DYNAMIC)return;this.sleepState===F.SLEEPING&&this.wakeUp();const s=e,n=on;n.copy(t),n.scale(this.invMass,n),this.velocity.vadd(n,this.velocity);const i=rn;s.cross(t,i),this.invInertiaWorld.vmult(i,i),this.angularVelocity.vadd(i,this.angularVelocity)}applyLocalImpulse(t,e){if(e===void 0&&(e=new d),this.type!==F.DYNAMIC)return;const s=ln,n=an;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,n),this.applyImpulse(s,n)}updateMassProperties(){const t=cn;this.invMass=this.mass>0?1/this.mass:0;const e=this.inertia,s=this.fixedRotation;this.updateAABB(),t.set((this.aabb.upperBound.x-this.aabb.lowerBound.x)/2,(this.aabb.upperBound.y-this.aabb.lowerBound.y)/2,(this.aabb.upperBound.z-this.aabb.lowerBound.z)/2),Zt.calculateInertia(t,this.mass,e),this.invInertia.set(e.x>0&&!s?1/e.x:0,e.y>0&&!s?1/e.y:0,e.z>0&&!s?1/e.z:0),this.updateInertiaWorld(!0)}getVelocityAtWorldPoint(t,e){const s=new d;return t.vsub(this.position,s),this.angularVelocity.cross(s,e),this.velocity.vadd(e,e),e}integrate(t,e,s){if(this.previousPosition.copy(this.position),this.previousQuaternion.copy(this.quaternion),!(this.type===F.DYNAMIC||this.type===F.KINEMATIC)||this.sleepState===F.SLEEPING)return;const n=this.velocity,i=this.angularVelocity,o=this.position,r=this.force,l=this.torque,a=this.quaternion,h=this.invMass,u=this.invInertiaWorld,c=this.linearFactor,f=h*t;n.x+=r.x*f*c.x,n.y+=r.y*f*c.y,n.z+=r.z*f*c.z;const p=u.elements,m=this.angularFactor,v=l.x*m.x,y=l.y*m.y,w=l.z*m.z;i.x+=t*(p[0]*v+p[1]*y+p[2]*w),i.y+=t*(p[3]*v+p[4]*y+p[5]*w),i.z+=t*(p[6]*v+p[7]*y+p[8]*w),o.x+=n.x*t,o.y+=n.y*t,o.z+=n.z*t,a.integrate(this.angularVelocity,t,this.angularFactor,a),e&&(s?a.normalizeFast():a.normalize()),this.aabbNeedsUpdate=!0,this.updateInertiaWorld()}}F.idCounter=0;F.COLLIDE_EVENT_NAME="collide";F.DYNAMIC=we.DYNAMIC;F.STATIC=we.STATIC;F.KINEMATIC=we.KINEMATIC;F.AWAKE=ve.AWAKE;F.SLEEPY=ve.SLEEPY;F.SLEEPING=ve.SLEEPING;F.wakeupEvent={type:"wakeup"};F.sleepyEvent={type:"sleepy"};F.sleepEvent={type:"sleep"};const Xs=new d,Ks=new D,Zs=new G,Qs=new st,Js=new st,tn=new st,en=new d,sn=new d,nn=new d,on=new d,rn=new d,ln=new d,an=new d,cn=new d;class hn{constructor(){this.world=null,this.useBoundingBoxes=!1,this.dirty=!0}collisionPairs(t,e,s){throw new Error("collisionPairs not implemented for this BroadPhase class!")}needBroadphaseCollision(t,e){return!((t.collisionFilterGroup&e.collisionFilterMask)===0||(e.collisionFilterGroup&t.collisionFilterMask)===0||((t.type&F.STATIC)!==0||t.sleepState===F.SLEEPING)&&((e.type&F.STATIC)!==0||e.sleepState===F.SLEEPING))}intersectionTest(t,e,s,n){this.useBoundingBoxes?this.doBoundingBoxBroadphase(t,e,s,n):this.doBoundingSphereBroadphase(t,e,s,n)}doBoundingSphereBroadphase(t,e,s,n){const i=un;e.position.vsub(t.position,i);const o=(t.boundingRadius+e.boundingRadius)**2;i.lengthSquared()<o&&(s.push(t),n.push(e))}doBoundingBoxBroadphase(t,e,s,n){t.aabbNeedsUpdate&&t.updateAABB(),e.aabbNeedsUpdate&&e.updateAABB(),t.aabb.overlaps(e.aabb)&&(s.push(t),n.push(e))}makePairsUnique(t,e){const s=dn,n=fn,i=pn,o=t.length;for(let r=0;r!==o;r++)n[r]=t[r],i[r]=e[r];t.length=0,e.length=0;for(let r=0;r!==o;r++){const l=n[r].id,a=i[r].id,h=l<a?`${l},${a}`:`${a},${l}`;s[h]=r,s.keys.push(h)}for(let r=0;r!==s.keys.length;r++){const l=s.keys.pop(),a=s[l];t.push(n[a]),e.push(i[a]),delete s[l]}}setWorld(t){}static boundingSphereCheck(t,e){const s=new d;t.position.vsub(e.position,s);const n=t.shapes[0],i=e.shapes[0];return Math.pow(n.boundingSphereRadius+i.boundingSphereRadius,2)>s.lengthSquared()}aabbQuery(t,e,s){return console.warn(".aabbQuery is not implemented in this Broadphase subclass."),[]}}const un=new d;new d;new D;new d;const dn={keys:[]},fn=[],pn=[];new d;new d;new d;class mn extends hn{constructor(){super()}collisionPairs(t,e,s){const n=t.bodies,i=n.length;let o,r;for(let l=0;l!==i;l++)for(let a=0;a!==l;a++)o=n[l],r=n[a],this.needBroadphaseCollision(o,r)&&this.intersectionTest(o,r,e,s)}aabbQuery(t,e,s){s===void 0&&(s=[]);for(let n=0;n<t.bodies.length;n++){const i=t.bodies[n];i.aabbNeedsUpdate&&i.updateAABB(),i.aabb.overlaps(e)&&s.push(i)}return s}}class Xt{constructor(){this.rayFromWorld=new d,this.rayToWorld=new d,this.hitNormalWorld=new d,this.hitPointWorld=new d,this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}reset(){this.rayFromWorld.setZero(),this.rayToWorld.setZero(),this.hitNormalWorld.setZero(),this.hitPointWorld.setZero(),this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}abort(){this.shouldStop=!0}set(t,e,s,n,i,o,r){this.rayFromWorld.copy(t),this.rayToWorld.copy(e),this.hitNormalWorld.copy(s),this.hitPointWorld.copy(n),this.shape=i,this.body=o,this.distance=r}}let hs,us,ds,fs,ps,ms,ws;const ye={CLOSEST:1,ANY:2,ALL:4};hs=P.types.SPHERE;us=P.types.PLANE;ds=P.types.BOX;fs=P.types.CYLINDER;ps=P.types.CONVEXPOLYHEDRON;ms=P.types.HEIGHTFIELD;ws=P.types.TRIMESH;class Y{get[hs](){return this._intersectSphere}get[us](){return this._intersectPlane}get[ds](){return this._intersectBox}get[fs](){return this._intersectConvex}get[ps](){return this._intersectConvex}get[ms](){return this._intersectHeightfield}get[ws](){return this._intersectTrimesh}constructor(t,e){t===void 0&&(t=new d),e===void 0&&(e=new d),this.from=t.clone(),this.to=e.clone(),this.direction=new d,this.precision=1e-4,this.checkCollisionResponse=!0,this.skipBackfaces=!1,this.collisionFilterMask=-1,this.collisionFilterGroup=-1,this.mode=Y.ANY,this.result=new Xt,this.hasHit=!1,this.callback=s=>{}}intersectWorld(t,e){return this.mode=e.mode||Y.ANY,this.result=e.result||new Xt,this.skipBackfaces=!!e.skipBackfaces,this.collisionFilterMask=typeof e.collisionFilterMask<"u"?e.collisionFilterMask:-1,this.collisionFilterGroup=typeof e.collisionFilterGroup<"u"?e.collisionFilterGroup:-1,this.checkCollisionResponse=typeof e.checkCollisionResponse<"u"?e.checkCollisionResponse:!0,e.from&&this.from.copy(e.from),e.to&&this.to.copy(e.to),this.callback=e.callback||(()=>{}),this.hasHit=!1,this.result.reset(),this.updateDirection(),this.getAABB(Pe),ie.length=0,t.broadphase.aabbQuery(t,Pe,ie),this.intersectBodies(ie),this.hasHit}intersectBody(t,e){e&&(this.result=e,this.updateDirection());const s=this.checkCollisionResponse;if(s&&!t.collisionResponse||(this.collisionFilterGroup&t.collisionFilterMask)===0||(t.collisionFilterGroup&this.collisionFilterMask)===0)return;const n=wn,i=vn;for(let o=0,r=t.shapes.length;o<r;o++){const l=t.shapes[o];if(!(s&&!l.collisionResponse)&&(t.quaternion.mult(t.shapeOrientations[o],i),t.quaternion.vmult(t.shapeOffsets[o],n),n.vadd(t.position,n),this.intersectShape(l,i,n,t),this.result.shouldStop))break}}intersectBodies(t,e){e&&(this.result=e,this.updateDirection());for(let s=0,n=t.length;!this.result.shouldStop&&s<n;s++)this.intersectBody(t[s])}updateDirection(){this.to.vsub(this.from,this.direction),this.direction.normalize()}intersectShape(t,e,s,n){const i=this.from;if(Pn(i,this.direction,s)>t.boundingSphereRadius)return;const r=this[t.type];r&&r.call(this,t,e,s,n,t)}_intersectBox(t,e,s,n,i){return this._intersectConvex(t.convexPolyhedronRepresentation,e,s,n,i)}_intersectPlane(t,e,s,n,i){const o=this.from,r=this.to,l=this.direction,a=new d(0,0,1);e.vmult(a,a);const h=new d;o.vsub(s,h);const u=h.dot(a);r.vsub(s,h);const c=h.dot(a);if(u*c>0||o.distanceTo(r)<u)return;const f=a.dot(l);if(Math.abs(f)<this.precision)return;const p=new d,m=new d,v=new d;o.vsub(s,p);const y=-a.dot(p)/f;l.scale(y,m),o.vadd(m,v),this.reportIntersection(a,v,i,n,-1)}getAABB(t){const{lowerBound:e,upperBound:s}=t,n=this.to,i=this.from;e.x=Math.min(n.x,i.x),e.y=Math.min(n.y,i.y),e.z=Math.min(n.z,i.z),s.x=Math.max(n.x,i.x),s.y=Math.max(n.y,i.y),s.z=Math.max(n.z,i.z)}_intersectHeightfield(t,e,s,n,i){t.data,t.elementSize;const o=yn;o.from.copy(this.from),o.to.copy(this.to),O.pointToLocalFrame(s,e,o.from,o.from),O.pointToLocalFrame(s,e,o.to,o.to),o.updateDirection();const r=gn;let l,a,h,u;l=a=0,h=u=t.data.length-1;const c=new G;o.getAABB(c),t.getIndexOfPosition(c.lowerBound.x,c.lowerBound.y,r,!0),l=Math.max(l,r[0]),a=Math.max(a,r[1]),t.getIndexOfPosition(c.upperBound.x,c.upperBound.y,r,!0),h=Math.min(h,r[0]+1),u=Math.min(u,r[1]+1);for(let f=l;f<h;f++)for(let p=a;p<u;p++){if(this.result.shouldStop)return;if(t.getAabbAtIndex(f,p,c),!!c.overlapsRay(o)){if(t.getConvexTrianglePillar(f,p,!1),O.pointToWorldFrame(s,e,t.pillarOffset,Vt),this._intersectConvex(t.pillarConvex,e,Vt,n,i,Ne),this.result.shouldStop)return;t.getConvexTrianglePillar(f,p,!0),O.pointToWorldFrame(s,e,t.pillarOffset,Vt),this._intersectConvex(t.pillarConvex,e,Vt,n,i,Ne)}}}_intersectSphere(t,e,s,n,i){const o=this.from,r=this.to,l=t.radius,a=(r.x-o.x)**2+(r.y-o.y)**2+(r.z-o.z)**2,h=2*((r.x-o.x)*(o.x-s.x)+(r.y-o.y)*(o.y-s.y)+(r.z-o.z)*(o.z-s.z)),u=(o.x-s.x)**2+(o.y-s.y)**2+(o.z-s.z)**2-l**2,c=h**2-4*a*u,f=xn,p=bn;if(!(c<0))if(c===0)o.lerp(r,c,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,i,n,-1);else{const m=(-h-Math.sqrt(c))/(2*a),v=(-h+Math.sqrt(c))/(2*a);if(m>=0&&m<=1&&(o.lerp(r,m,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,i,n,-1)),this.result.shouldStop)return;v>=0&&v<=1&&(o.lerp(r,v,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,i,n,-1))}}_intersectConvex(t,e,s,n,i,o){const r=En,l=Ie,a=o&&o.faceList||null,h=t.faces,u=t.vertices,c=t.faceNormals,f=this.direction,p=this.from,m=this.to,v=p.distanceTo(m),y=a?a.length:h.length,w=this.result;for(let x=0;!w.shouldStop&&x<y;x++){const E=a?a[x]:x,_=h[E],C=c[E],T=e,N=s;l.copy(u[_[0]]),T.vmult(l,l),l.vadd(N,l),l.vsub(p,l),T.vmult(C,r);const R=f.dot(r);if(Math.abs(R)<this.precision)continue;const z=r.dot(l)/R;if(!(z<0)){f.scale(z,Q),Q.vadd(p,Q),J.copy(u[_[0]]),T.vmult(J,J),N.vadd(J,J);for(let S=1;!w.shouldStop&&S<_.length-1;S++){it.copy(u[_[S]]),ot.copy(u[_[S+1]]),T.vmult(it,it),T.vmult(ot,ot),N.vadd(it,it),N.vadd(ot,ot);const I=Q.distanceTo(p);!(Y.pointInTriangle(Q,J,it,ot)||Y.pointInTriangle(Q,it,J,ot))||I>v||this.reportIntersection(r,Q,i,n,E)}}}}_intersectTrimesh(t,e,s,n,i,o){const r=_n,l=Sn,a=Bn,h=Ie,u=zn,c=Cn,f=An,p=Tn,m=Mn,v=t.indices;t.vertices;const y=this.from,w=this.to,x=this.direction;a.position.copy(s),a.quaternion.copy(e),O.vectorToLocalFrame(s,e,x,u),O.pointToLocalFrame(s,e,y,c),O.pointToLocalFrame(s,e,w,f),f.x*=t.scale.x,f.y*=t.scale.y,f.z*=t.scale.z,c.x*=t.scale.x,c.y*=t.scale.y,c.z*=t.scale.z,f.vsub(c,u),u.normalize();const E=c.distanceSquared(f);t.tree.rayQuery(this,a,l);for(let _=0,C=l.length;!this.result.shouldStop&&_!==C;_++){const T=l[_];t.getNormal(T,r),t.getVertex(v[T*3],J),J.vsub(c,h);const N=u.dot(r),R=r.dot(h)/N;if(R<0)continue;u.scale(R,Q),Q.vadd(c,Q),t.getVertex(v[T*3+1],it),t.getVertex(v[T*3+2],ot);const z=Q.distanceSquared(c);!(Y.pointInTriangle(Q,it,J,ot)||Y.pointInTriangle(Q,J,it,ot))||z>E||(O.vectorToWorldFrame(e,r,m),O.pointToWorldFrame(s,e,Q,p),this.reportIntersection(m,p,i,n,T))}l.length=0}reportIntersection(t,e,s,n,i){const o=this.from,r=this.to,l=o.distanceTo(e),a=this.result;if(!(this.skipBackfaces&&t.dot(this.direction)>0))switch(a.hitFaceIndex=typeof i<"u"?i:-1,this.mode){case Y.ALL:this.hasHit=!0,a.set(o,r,t,e,s,n,l),a.hasHit=!0,this.callback(a);break;case Y.CLOSEST:(l<a.distance||!a.hasHit)&&(this.hasHit=!0,a.hasHit=!0,a.set(o,r,t,e,s,n,l));break;case Y.ANY:this.hasHit=!0,a.hasHit=!0,a.set(o,r,t,e,s,n,l),a.shouldStop=!0;break}}static pointInTriangle(t,e,s,n){n.vsub(e,yt),s.vsub(e,At),t.vsub(e,oe);const i=yt.dot(yt),o=yt.dot(At),r=yt.dot(oe),l=At.dot(At),a=At.dot(oe);let h,u;return(h=l*r-o*a)>=0&&(u=i*a-o*r)>=0&&h+u<i*l-o*o}}Y.CLOSEST=ye.CLOSEST;Y.ANY=ye.ANY;Y.ALL=ye.ALL;const Pe=new G,ie=[],At=new d,oe=new d,wn=new d,vn=new D,Q=new d,J=new d,it=new d,ot=new d;new d;new Xt;const Ne={faceList:[0]},Vt=new d,yn=new Y,gn=[],xn=new d,bn=new d,En=new d;new d;new d;const Ie=new d,_n=new d,zn=new d,Cn=new d,An=new d,Mn=new d,Tn=new d;new G;const Sn=[],Bn=new O,yt=new d,Lt=new d;function Pn(g,t,e){e.vsub(g,yt);const s=yt.dot(t);return t.scale(s,Lt),Lt.vadd(g,Lt),e.distanceTo(Lt)}class vs{static defaults(t,e){t===void 0&&(t={});for(let s in e)s in t||(t[s]=e[s]);return t}}class Fe{constructor(){this.spatial=new d,this.rotational=new d}multiplyElement(t){return t.spatial.dot(this.spatial)+t.rotational.dot(this.rotational)}multiplyVectors(t,e){return t.dot(this.spatial)+e.dot(this.rotational)}}class It{constructor(t,e,s,n){s===void 0&&(s=-1e6),n===void 0&&(n=1e6),this.id=It.idCounter++,this.minForce=s,this.maxForce=n,this.bi=t,this.bj=e,this.a=0,this.b=0,this.eps=0,this.jacobianElementA=new Fe,this.jacobianElementB=new Fe,this.enabled=!0,this.multiplier=0,this.setSpookParams(1e7,4,1/60)}setSpookParams(t,e,s){const n=e,i=t,o=s;this.a=4/(o*(1+4*n)),this.b=4*n/(1+4*n),this.eps=4/(o*o*i*(1+4*n))}computeB(t,e,s){const n=this.computeGW(),i=this.computeGq(),o=this.computeGiMf();return-i*t-n*e-o*s}computeGq(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.position,o=n.position;return t.spatial.dot(i)+e.spatial.dot(o)}computeGW(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.velocity,o=n.velocity,r=s.angularVelocity,l=n.angularVelocity;return t.multiplyVectors(i,r)+e.multiplyVectors(o,l)}computeGWlambda(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.vlambda,o=n.vlambda,r=s.wlambda,l=n.wlambda;return t.multiplyVectors(i,r)+e.multiplyVectors(o,l)}computeGiMf(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.force,o=s.torque,r=n.force,l=n.torque,a=s.invMassSolve,h=n.invMassSolve;return i.scale(a,Re),r.scale(h,qe),s.invInertiaWorldSolve.vmult(o,Ve),n.invInertiaWorldSolve.vmult(l,Le),t.multiplyVectors(Re,Ve)+e.multiplyVectors(qe,Le)}computeGiMGt(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.invMassSolve,o=n.invMassSolve,r=s.invInertiaWorldSolve,l=n.invInertiaWorldSolve;let a=i+o;return r.vmult(t.rotational,kt),a+=kt.dot(t.rotational),l.vmult(e.rotational,kt),a+=kt.dot(e.rotational),a}addToWlambda(t){const e=this.jacobianElementA,s=this.jacobianElementB,n=this.bi,i=this.bj,o=Nn;n.vlambda.addScaledVector(n.invMassSolve*t,e.spatial,n.vlambda),i.vlambda.addScaledVector(i.invMassSolve*t,s.spatial,i.vlambda),n.invInertiaWorldSolve.vmult(e.rotational,o),n.wlambda.addScaledVector(t,o,n.wlambda),i.invInertiaWorldSolve.vmult(s.rotational,o),i.wlambda.addScaledVector(t,o,i.wlambda)}computeC(){return this.computeGiMGt()+this.eps}}It.idCounter=0;const Re=new d,qe=new d,Ve=new d,Le=new d,kt=new d,Nn=new d;class In extends It{constructor(t,e,s){s===void 0&&(s=1e6),super(t,e,0,s),this.restitution=0,this.ri=new d,this.rj=new d,this.ni=new d}computeB(t){const e=this.a,s=this.b,n=this.bi,i=this.bj,o=this.ri,r=this.rj,l=Fn,a=Rn,h=n.velocity,u=n.angularVelocity;n.force,n.torque;const c=i.velocity,f=i.angularVelocity;i.force,i.torque;const p=qn,m=this.jacobianElementA,v=this.jacobianElementB,y=this.ni;o.cross(y,l),r.cross(y,a),y.negate(m.spatial),l.negate(m.rotational),v.spatial.copy(y),v.rotational.copy(a),p.copy(i.position),p.vadd(r,p),p.vsub(n.position,p),p.vsub(o,p);const w=y.dot(p),x=this.restitution+1,E=x*c.dot(y)-x*h.dot(y)+f.dot(a)-u.dot(l),_=this.computeGiMf();return-w*e-E*s-t*_}getImpactVelocityAlongNormal(){const t=Vn,e=Ln,s=kn,n=jn,i=On;return this.bi.position.vadd(this.ri,s),this.bj.position.vadd(this.rj,n),this.bi.getVelocityAtWorldPoint(s,t),this.bj.getVelocityAtWorldPoint(n,e),t.vsub(e,i),this.ni.dot(i)}}const Fn=new d,Rn=new d,qn=new d,Vn=new d,Ln=new d,kn=new d,jn=new d,On=new d;new d;new d;new d;new d;new d;new d;new d;new d;new d;new d;class ke extends It{constructor(t,e,s){super(t,e,-s,s),this.ri=new d,this.rj=new d,this.t=new d}computeB(t){this.a;const e=this.b;this.bi,this.bj;const s=this.ri,n=this.rj,i=Wn,o=Hn,r=this.t;s.cross(r,i),n.cross(r,o);const l=this.jacobianElementA,a=this.jacobianElementB;r.negate(l.spatial),i.negate(l.rotational),a.spatial.copy(r),a.rotational.copy(o);const h=this.computeGW(),u=this.computeGiMf();return-h*e-t*u}}const Wn=new d,Hn=new d;class Qt{constructor(t,e,s){s=vs.defaults(s,{friction:.3,restitution:.3,contactEquationStiffness:1e7,contactEquationRelaxation:3,frictionEquationStiffness:1e7,frictionEquationRelaxation:3}),this.id=Qt.idCounter++,this.materials=[t,e],this.friction=s.friction,this.restitution=s.restitution,this.contactEquationStiffness=s.contactEquationStiffness,this.contactEquationRelaxation=s.contactEquationRelaxation,this.frictionEquationStiffness=s.frictionEquationStiffness,this.frictionEquationRelaxation=s.frictionEquationRelaxation}}Qt.idCounter=0;class Jt{constructor(t){t===void 0&&(t={});let e="";typeof t=="string"&&(e=t,t={}),this.name=e,this.id=Jt.idCounter++,this.friction=typeof t.friction<"u"?t.friction:-1,this.restitution=typeof t.restitution<"u"?t.restitution:-1}}Jt.idCounter=0;new d;new d;new d;new d;new d;new d;new d;new d;new d;new d;new d;new d;new d;new d;new d;new d;new d;new d;new d;new Y;new d;new d;new d;new d(1,0,0),new d(0,1,0),new d(0,0,1);new d;new d;new d;new d;new d;new d;new d;new d;new d;new d;new d;class Gn extends P{constructor(t){if(super({type:P.types.SPHERE}),this.radius=t!==void 0?t:1,this.radius<0)throw new Error("The sphere radius cannot be negative.");this.updateBoundingSphereRadius()}calculateLocalInertia(t,e){e===void 0&&(e=new d);const s=2*t*this.radius*this.radius/5;return e.x=s,e.y=s,e.z=s,e}volume(){return 4*Math.PI*Math.pow(this.radius,3)/3}updateBoundingSphereRadius(){this.boundingSphereRadius=this.radius}calculateWorldAABB(t,e,s,n){const i=this.radius,o=["x","y","z"];for(let r=0;r<o.length;r++){const l=o[r];s[l]=t[l]-i,n[l]=t[l]+i}}}new d;new d;new d;new d;new d;new d;new d;new d;new d;class Dn extends dt{constructor(t,e,s,n){if(t===void 0&&(t=1),e===void 0&&(e=1),s===void 0&&(s=1),n===void 0&&(n=8),t<0)throw new Error("The cylinder radiusTop cannot be negative.");if(e<0)throw new Error("The cylinder radiusBottom cannot be negative.");const i=n,o=[],r=[],l=[],a=[],h=[],u=Math.cos,c=Math.sin;o.push(new d(-e*c(0),-s*.5,e*u(0))),a.push(0),o.push(new d(-t*c(0),s*.5,t*u(0))),h.push(1);for(let p=0;p<i;p++){const m=2*Math.PI/i*(p+1),v=2*Math.PI/i*(p+.5);p<i-1?(o.push(new d(-e*c(m),-s*.5,e*u(m))),a.push(2*p+2),o.push(new d(-t*c(m),s*.5,t*u(m))),h.push(2*p+3),l.push([2*p,2*p+1,2*p+3,2*p+2])):l.push([2*p,2*p+1,1,0]),(i%2===1||p<i/2)&&r.push(new d(-c(v),0,u(v)))}l.push(a),r.push(new d(0,1,0));const f=[];for(let p=0;p<h.length;p++)f.push(h[h.length-p-1]);l.push(f),super({vertices:o,faces:l,axes:r}),this.type=P.types.CYLINDER,this.radiusTop=t,this.radiusBottom=e,this.height=s,this.numSegments=n}}class ys extends P{constructor(){super({type:P.types.PLANE}),this.worldNormal=new d,this.worldNormalNeedsUpdate=!0,this.boundingSphereRadius=Number.MAX_VALUE}computeWorldNormal(t){const e=this.worldNormal;e.set(0,0,1),t.vmult(e,e),this.worldNormalNeedsUpdate=!1}calculateLocalInertia(t,e){return e===void 0&&(e=new d),e}volume(){return Number.MAX_VALUE}calculateWorldAABB(t,e,s,n){lt.set(0,0,1),e.vmult(lt,lt);const i=Number.MAX_VALUE;s.set(-i,-i,-i),n.set(i,i,i),lt.x===1?n.x=t.x:lt.x===-1&&(s.x=t.x),lt.y===1?n.y=t.y:lt.y===-1&&(s.y=t.y),lt.z===1?n.z=t.z:lt.z===-1&&(s.z=t.z)}updateBoundingSphereRadius(){this.boundingSphereRadius=Number.MAX_VALUE}}const lt=new d;class Un extends P{constructor(t,e){e===void 0&&(e={}),e=vs.defaults(e,{maxValue:null,minValue:null,elementSize:1}),super({type:P.types.HEIGHTFIELD}),this.data=t,this.maxValue=e.maxValue,this.minValue=e.minValue,this.elementSize=e.elementSize,e.minValue===null&&this.updateMinValue(),e.maxValue===null&&this.updateMaxValue(),this.cacheEnabled=!0,this.pillarConvex=new dt,this.pillarOffset=new d,this.updateBoundingSphereRadius(),this._cachedPillars={}}update(){this._cachedPillars={}}updateMinValue(){const t=this.data;let e=t[0][0];for(let s=0;s!==t.length;s++)for(let n=0;n!==t[s].length;n++){const i=t[s][n];i<e&&(e=i)}this.minValue=e}updateMaxValue(){const t=this.data;let e=t[0][0];for(let s=0;s!==t.length;s++)for(let n=0;n!==t[s].length;n++){const i=t[s][n];i>e&&(e=i)}this.maxValue=e}setHeightValueAtIndex(t,e,s){const n=this.data;n[t][e]=s,this.clearCachedConvexTrianglePillar(t,e,!1),t>0&&(this.clearCachedConvexTrianglePillar(t-1,e,!0),this.clearCachedConvexTrianglePillar(t-1,e,!1)),e>0&&(this.clearCachedConvexTrianglePillar(t,e-1,!0),this.clearCachedConvexTrianglePillar(t,e-1,!1)),e>0&&t>0&&this.clearCachedConvexTrianglePillar(t-1,e-1,!0)}getRectMinMax(t,e,s,n,i){i===void 0&&(i=[]);const o=this.data;let r=this.minValue;for(let l=t;l<=s;l++)for(let a=e;a<=n;a++){const h=o[l][a];h>r&&(r=h)}i[0]=this.minValue,i[1]=r}getIndexOfPosition(t,e,s,n){const i=this.elementSize,o=this.data;let r=Math.floor(t/i),l=Math.floor(e/i);return s[0]=r,s[1]=l,n&&(r<0&&(r=0),l<0&&(l=0),r>=o.length-1&&(r=o.length-1),l>=o[0].length-1&&(l=o[0].length-1)),!(r<0||l<0||r>=o.length-1||l>=o[0].length-1)}getTriangleAt(t,e,s,n,i,o){const r=je;this.getIndexOfPosition(t,e,r,s);let l=r[0],a=r[1];const h=this.data;s&&(l=Math.min(h.length-2,Math.max(0,l)),a=Math.min(h[0].length-2,Math.max(0,a)));const u=this.elementSize,c=(t/u-l)**2+(e/u-a)**2,f=(t/u-(l+1))**2+(e/u-(a+1))**2,p=c>f;return this.getTriangle(l,a,p,n,i,o),p}getNormalAt(t,e,s,n){const i=Kn,o=Zn,r=Qn,l=Jn,a=ti;this.getTriangleAt(t,e,s,i,o,r),o.vsub(i,l),r.vsub(i,a),l.cross(a,n),n.normalize()}getAabbAtIndex(t,e,s){let{lowerBound:n,upperBound:i}=s;const o=this.data,r=this.elementSize;n.set(t*r,e*r,o[t][e]),i.set((t+1)*r,(e+1)*r,o[t+1][e+1])}getHeightAt(t,e,s){const n=this.data,i=Yn,o=$n,r=Xn,l=je;this.getIndexOfPosition(t,e,l,s);let a=l[0],h=l[1];s&&(a=Math.min(n.length-2,Math.max(0,a)),h=Math.min(n[0].length-2,Math.max(0,h)));const u=this.getTriangleAt(t,e,s,i,o,r);ei(t,e,i.x,i.y,o.x,o.y,r.x,r.y,Oe);const c=Oe;return u?n[a+1][h+1]*c.x+n[a][h+1]*c.y+n[a+1][h]*c.z:n[a][h]*c.x+n[a+1][h]*c.y+n[a][h+1]*c.z}getCacheConvexTrianglePillarKey(t,e,s){return`${t}_${e}_${s?1:0}`}getCachedConvexTrianglePillar(t,e,s){return this._cachedPillars[this.getCacheConvexTrianglePillarKey(t,e,s)]}setCachedConvexTrianglePillar(t,e,s,n,i){this._cachedPillars[this.getCacheConvexTrianglePillarKey(t,e,s)]={convex:n,offset:i}}clearCachedConvexTrianglePillar(t,e,s){delete this._cachedPillars[this.getCacheConvexTrianglePillarKey(t,e,s)]}getTriangle(t,e,s,n,i,o){const r=this.data,l=this.elementSize;s?(n.set((t+1)*l,(e+1)*l,r[t+1][e+1]),i.set(t*l,(e+1)*l,r[t][e+1]),o.set((t+1)*l,e*l,r[t+1][e])):(n.set(t*l,e*l,r[t][e]),i.set((t+1)*l,e*l,r[t+1][e]),o.set(t*l,(e+1)*l,r[t][e+1]))}getConvexTrianglePillar(t,e,s){let n=this.pillarConvex,i=this.pillarOffset;if(this.cacheEnabled){const u=this.getCachedConvexTrianglePillar(t,e,s);if(u){this.pillarConvex=u.convex,this.pillarOffset=u.offset;return}n=new dt,i=new d,this.pillarConvex=n,this.pillarOffset=i}const o=this.data,r=this.elementSize,l=n.faces;n.vertices.length=6;for(let u=0;u<6;u++)n.vertices[u]||(n.vertices[u]=new d);l.length=5;for(let u=0;u<5;u++)l[u]||(l[u]=[]);const a=n.vertices,h=(Math.min(o[t][e],o[t+1][e],o[t][e+1],o[t+1][e+1])-this.minValue)/2+this.minValue;s?(i.set((t+.75)*r,(e+.75)*r,h),a[0].set(.25*r,.25*r,o[t+1][e+1]-h),a[1].set(-.75*r,.25*r,o[t][e+1]-h),a[2].set(.25*r,-.75*r,o[t+1][e]-h),a[3].set(.25*r,.25*r,-Math.abs(h)-1),a[4].set(-.75*r,.25*r,-Math.abs(h)-1),a[5].set(.25*r,-.75*r,-Math.abs(h)-1),l[0][0]=0,l[0][1]=1,l[0][2]=2,l[1][0]=5,l[1][1]=4,l[1][2]=3,l[2][0]=2,l[2][1]=5,l[2][2]=3,l[2][3]=0,l[3][0]=3,l[3][1]=4,l[3][2]=1,l[3][3]=0,l[4][0]=1,l[4][1]=4,l[4][2]=5,l[4][3]=2):(i.set((t+.25)*r,(e+.25)*r,h),a[0].set(-.25*r,-.25*r,o[t][e]-h),a[1].set(.75*r,-.25*r,o[t+1][e]-h),a[2].set(-.25*r,.75*r,o[t][e+1]-h),a[3].set(-.25*r,-.25*r,-Math.abs(h)-1),a[4].set(.75*r,-.25*r,-Math.abs(h)-1),a[5].set(-.25*r,.75*r,-Math.abs(h)-1),l[0][0]=0,l[0][1]=1,l[0][2]=2,l[1][0]=5,l[1][1]=4,l[1][2]=3,l[2][0]=0,l[2][1]=2,l[2][2]=5,l[2][3]=3,l[3][0]=1,l[3][1]=0,l[3][2]=3,l[3][3]=4,l[4][0]=4,l[4][1]=5,l[4][2]=2,l[4][3]=1),n.computeNormals(),n.computeEdges(),n.updateBoundingSphereRadius(),this.setCachedConvexTrianglePillar(t,e,s,n,i)}calculateLocalInertia(t,e){return e===void 0&&(e=new d),e.set(0,0,0),e}volume(){return Number.MAX_VALUE}calculateWorldAABB(t,e,s,n){s.set(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE),n.set(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE)}updateBoundingSphereRadius(){const t=this.data,e=this.elementSize;this.boundingSphereRadius=new d(t.length*e,t[0].length*e,Math.max(Math.abs(this.maxValue),Math.abs(this.minValue))).length()}setHeightsFromImage(t,e){const{x:s,z:n,y:i}=e,o=document.createElement("canvas");o.width=t.width,o.height=t.height;const r=o.getContext("2d");r.drawImage(t,0,0);const l=r.getImageData(0,0,t.width,t.height),a=this.data;a.length=0,this.elementSize=Math.abs(s)/l.width;for(let h=0;h<l.height;h++){const u=[];for(let c=0;c<l.width;c++){const f=l.data[(h*l.height+c)*4],p=l.data[(h*l.height+c)*4+1],m=l.data[(h*l.height+c)*4+2],v=(f+p+m)/4/255*n;s<0?u.push(v):u.unshift(v)}i<0?a.unshift(u):a.push(u)}this.updateMaxValue(),this.updateMinValue(),this.update()}}const je=[],Oe=new d,Yn=new d,$n=new d,Xn=new d,Kn=new d,Zn=new d,Qn=new d,Jn=new d,ti=new d;function ei(g,t,e,s,n,i,o,r,l){l.x=((i-r)*(g-o)+(o-n)*(t-r))/((i-r)*(e-o)+(o-n)*(s-r)),l.y=((r-s)*(g-o)+(e-o)*(t-r))/((i-r)*(e-o)+(o-n)*(s-r)),l.z=1-l.x-l.y}class rt{constructor(t){t===void 0&&(t={}),this.root=t.root||null,this.aabb=t.aabb?t.aabb.clone():new G,this.data=[],this.children=[]}reset(){this.children.length=this.data.length=0}insert(t,e,s){s===void 0&&(s=0);const n=this.data;if(!this.aabb.contains(t))return!1;const i=this.children,o=this.maxDepth||this.root.maxDepth;if(s<o){let r=!1;i.length||(this.subdivide(),r=!0);for(let l=0;l!==8;l++)if(i[l].insert(t,e,s+1))return!0;r&&(i.length=0)}return n.push(e),!0}subdivide(){const t=this.aabb,e=t.lowerBound,s=t.upperBound,n=this.children;n.push(new rt({aabb:new G({lowerBound:new d(0,0,0)})}),new rt({aabb:new G({lowerBound:new d(1,0,0)})}),new rt({aabb:new G({lowerBound:new d(1,1,0)})}),new rt({aabb:new G({lowerBound:new d(1,1,1)})}),new rt({aabb:new G({lowerBound:new d(0,1,1)})}),new rt({aabb:new G({lowerBound:new d(0,0,1)})}),new rt({aabb:new G({lowerBound:new d(1,0,1)})}),new rt({aabb:new G({lowerBound:new d(0,1,0)})})),s.vsub(e,mt),mt.scale(.5,mt);const i=this.root||this;for(let o=0;o!==8;o++){const r=n[o];r.root=i;const l=r.aabb.lowerBound;l.x*=mt.x,l.y*=mt.y,l.z*=mt.z,l.vadd(e,l),l.vadd(mt,r.aabb.upperBound)}}aabbQuery(t,e){this.data,this.children;const s=[this];for(;s.length;){const n=s.pop();n.aabb.overlaps(t)&&Array.prototype.push.apply(e,n.data),Array.prototype.push.apply(s,n.children)}return e}rayQuery(t,e,s){return t.getAABB(jt),jt.toLocalFrame(e,jt),this.aabbQuery(jt,s),s}removeEmptyNodes(){for(let t=this.children.length-1;t>=0;t--)this.children[t].removeEmptyNodes(),!this.children[t].children.length&&!this.children[t].data.length&&this.children.splice(t,1)}}class si extends rt{constructor(t,e){e===void 0&&(e={}),super({root:null,aabb:t}),this.maxDepth=typeof e.maxDepth<"u"?e.maxDepth:8}}const mt=new d,jt=new G;class Nt extends P{constructor(t,e){super({type:P.types.TRIMESH}),this.vertices=new Float32Array(t),this.indices=new Int16Array(e),this.normals=new Float32Array(e.length),this.aabb=new G,this.edges=null,this.scale=new d(1,1,1),this.tree=new si,this.updateEdges(),this.updateNormals(),this.updateAABB(),this.updateBoundingSphereRadius(),this.updateTree()}updateTree(){const t=this.tree;t.reset(),t.aabb.copy(this.aabb);const e=this.scale;t.aabb.lowerBound.x*=1/e.x,t.aabb.lowerBound.y*=1/e.y,t.aabb.lowerBound.z*=1/e.z,t.aabb.upperBound.x*=1/e.x,t.aabb.upperBound.y*=1/e.y,t.aabb.upperBound.z*=1/e.z;const s=new G,n=new d,i=new d,o=new d,r=[n,i,o];for(let l=0;l<this.indices.length/3;l++){const a=l*3;this._getUnscaledVertex(this.indices[a],n),this._getUnscaledVertex(this.indices[a+1],i),this._getUnscaledVertex(this.indices[a+2],o),s.setFromPoints(r),t.insert(s,l)}t.removeEmptyNodes()}getTrianglesInAABB(t,e){Ot.copy(t);const s=this.scale,n=s.x,i=s.y,o=s.z,r=Ot.lowerBound,l=Ot.upperBound;return r.x/=n,r.y/=i,r.z/=o,l.x/=n,l.y/=i,l.z/=o,this.tree.aabbQuery(Ot,e)}setScale(t){const e=this.scale.x===this.scale.y&&this.scale.y===this.scale.z,s=t.x===t.y&&t.y===t.z;e&&s||this.updateNormals(),this.scale.copy(t),this.updateAABB(),this.updateBoundingSphereRadius()}updateNormals(){const t=ni,e=this.normals;for(let s=0;s<this.indices.length/3;s++){const n=s*3,i=this.indices[n],o=this.indices[n+1],r=this.indices[n+2];this.getVertex(i,Ge),this.getVertex(o,De),this.getVertex(r,Ue),Nt.computeNormal(De,Ge,Ue,t),e[n]=t.x,e[n+1]=t.y,e[n+2]=t.z}}updateEdges(){const t={},e=(n,i)=>{const o=n<i?`${n}_${i}`:`${i}_${n}`;t[o]=!0};for(let n=0;n<this.indices.length/3;n++){const i=n*3,o=this.indices[i],r=this.indices[i+1],l=this.indices[i+2];e(o,r),e(r,l),e(l,o)}const s=Object.keys(t);this.edges=new Int16Array(s.length*2);for(let n=0;n<s.length;n++){const i=s[n].split("_");this.edges[2*n]=parseInt(i[0],10),this.edges[2*n+1]=parseInt(i[1],10)}}getEdgeVertex(t,e,s){const n=this.edges[t*2+(e?1:0)];this.getVertex(n,s)}getEdgeVector(t,e){const s=ii,n=oi;this.getEdgeVertex(t,0,s),this.getEdgeVertex(t,1,n),n.vsub(s,e)}static computeNormal(t,e,s,n){e.vsub(t,He),s.vsub(e,We),We.cross(He,n),n.isZero()||n.normalize()}getVertex(t,e){const s=this.scale;return this._getUnscaledVertex(t,e),e.x*=s.x,e.y*=s.y,e.z*=s.z,e}_getUnscaledVertex(t,e){const s=t*3,n=this.vertices;return e.set(n[s],n[s+1],n[s+2])}getWorldVertex(t,e,s,n){return this.getVertex(t,n),O.pointToWorldFrame(e,s,n,n),n}getTriangleVertices(t,e,s,n){const i=t*3;this.getVertex(this.indices[i],e),this.getVertex(this.indices[i+1],s),this.getVertex(this.indices[i+2],n)}getNormal(t,e){const s=t*3;return e.set(this.normals[s],this.normals[s+1],this.normals[s+2])}calculateLocalInertia(t,e){this.computeLocalAABB(wt);const s=wt.upperBound.x-wt.lowerBound.x,n=wt.upperBound.y-wt.lowerBound.y,i=wt.upperBound.z-wt.lowerBound.z;return e.set(1/12*t*(2*n*2*n+2*i*2*i),1/12*t*(2*s*2*s+2*i*2*i),1/12*t*(2*n*2*n+2*s*2*s))}computeLocalAABB(t){const e=t.lowerBound,s=t.upperBound,n=this.vertices.length;this.vertices;const i=ri;this.getVertex(0,i),e.copy(i),s.copy(i);for(let o=0;o!==n;o++)this.getVertex(o,i),i.x<e.x?e.x=i.x:i.x>s.x&&(s.x=i.x),i.y<e.y?e.y=i.y:i.y>s.y&&(s.y=i.y),i.z<e.z?e.z=i.z:i.z>s.z&&(s.z=i.z)}updateAABB(){this.computeLocalAABB(this.aabb)}updateBoundingSphereRadius(){let t=0;const e=this.vertices,s=new d;for(let n=0,i=e.length/3;n!==i;n++){this.getVertex(n,s);const o=s.lengthSquared();o>t&&(t=o)}this.boundingSphereRadius=Math.sqrt(t)}calculateWorldAABB(t,e,s,n){const i=li,o=ai;i.position=t,i.quaternion=e,this.aabb.toWorldFrame(i,o),s.copy(o.lowerBound),n.copy(o.upperBound)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}static createTorus(t,e,s,n,i){t===void 0&&(t=1),e===void 0&&(e=.5),s===void 0&&(s=8),n===void 0&&(n=6),i===void 0&&(i=Math.PI*2);const o=[],r=[];for(let l=0;l<=s;l++)for(let a=0;a<=n;a++){const h=a/n*i,u=l/s*Math.PI*2,c=(t+e*Math.cos(u))*Math.cos(h),f=(t+e*Math.cos(u))*Math.sin(h),p=e*Math.sin(u);o.push(c,f,p)}for(let l=1;l<=s;l++)for(let a=1;a<=n;a++){const h=(n+1)*l+a-1,u=(n+1)*(l-1)+a-1,c=(n+1)*(l-1)+a,f=(n+1)*l+a;r.push(h,u,f),r.push(u,c,f)}return new Nt(o,r)}}const ni=new d,Ot=new G,ii=new d,oi=new d,We=new d,He=new d,Ge=new d,De=new d,Ue=new d,wt=new G,ri=new d,li=new O,ai=new G;class ci{constructor(){this.equations=[]}solve(t,e){return 0}addEquation(t){t.enabled&&!t.bi.isTrigger&&!t.bj.isTrigger&&this.equations.push(t)}removeEquation(t){const e=this.equations,s=e.indexOf(t);s!==-1&&e.splice(s,1)}removeAllEquations(){this.equations.length=0}}class hi extends ci{constructor(){super(),this.iterations=10,this.tolerance=1e-7}solve(t,e){let s=0;const n=this.iterations,i=this.tolerance*this.tolerance,o=this.equations,r=o.length,l=e.bodies,a=l.length,h=t;let u,c,f,p,m,v;if(r!==0)for(let E=0;E!==a;E++)l[E].updateSolveMassProperties();const y=di,w=fi,x=ui;y.length=r,w.length=r,x.length=r;for(let E=0;E!==r;E++){const _=o[E];x[E]=0,w[E]=_.computeB(h),y[E]=1/_.computeC()}if(r!==0){for(let C=0;C!==a;C++){const T=l[C],N=T.vlambda,R=T.wlambda;N.set(0,0,0),R.set(0,0,0)}for(s=0;s!==n;s++){p=0;for(let C=0;C!==r;C++){const T=o[C];u=w[C],c=y[C],v=x[C],m=T.computeGWlambda(),f=c*(u-m-T.eps*v),v+f<T.minForce?f=T.minForce-v:v+f>T.maxForce&&(f=T.maxForce-v),x[C]+=f,p+=f>0?f:-f,T.addToWlambda(f)}if(p*p<i)break}for(let C=0;C!==a;C++){const T=l[C],N=T.velocity,R=T.angularVelocity;T.vlambda.vmul(T.linearFactor,T.vlambda),N.vadd(T.vlambda,N),T.wlambda.vmul(T.angularFactor,T.wlambda),R.vadd(T.wlambda,R)}let E=o.length;const _=1/h;for(;E--;)o[E].multiplier=x[E]*_}return s}}const ui=[],di=[],fi=[];F.STATIC;class pi{constructor(){this.objects=[],this.type=Object}release(){const t=arguments.length;for(let e=0;e!==t;e++)this.objects.push(e<0||arguments.length<=e?void 0:arguments[e]);return this}get(){return this.objects.length===0?this.constructObject():this.objects.pop()}constructObject(){throw new Error("constructObject() not implemented in this Pool subclass yet!")}resize(t){const e=this.objects;for(;e.length>t;)e.pop();for(;e.length<t;)e.push(this.constructObject());return this}}class mi extends pi{constructor(){super(...arguments),this.type=d}constructObject(){return new d}}const H={sphereSphere:P.types.SPHERE,spherePlane:P.types.SPHERE|P.types.PLANE,boxBox:P.types.BOX|P.types.BOX,sphereBox:P.types.SPHERE|P.types.BOX,planeBox:P.types.PLANE|P.types.BOX,convexConvex:P.types.CONVEXPOLYHEDRON,sphereConvex:P.types.SPHERE|P.types.CONVEXPOLYHEDRON,planeConvex:P.types.PLANE|P.types.CONVEXPOLYHEDRON,boxConvex:P.types.BOX|P.types.CONVEXPOLYHEDRON,sphereHeightfield:P.types.SPHERE|P.types.HEIGHTFIELD,boxHeightfield:P.types.BOX|P.types.HEIGHTFIELD,convexHeightfield:P.types.CONVEXPOLYHEDRON|P.types.HEIGHTFIELD,sphereParticle:P.types.PARTICLE|P.types.SPHERE,planeParticle:P.types.PLANE|P.types.PARTICLE,boxParticle:P.types.BOX|P.types.PARTICLE,convexParticle:P.types.PARTICLE|P.types.CONVEXPOLYHEDRON,cylinderCylinder:P.types.CYLINDER,sphereCylinder:P.types.SPHERE|P.types.CYLINDER,planeCylinder:P.types.PLANE|P.types.CYLINDER,boxCylinder:P.types.BOX|P.types.CYLINDER,convexCylinder:P.types.CONVEXPOLYHEDRON|P.types.CYLINDER,heightfieldCylinder:P.types.HEIGHTFIELD|P.types.CYLINDER,particleCylinder:P.types.PARTICLE|P.types.CYLINDER,sphereTrimesh:P.types.SPHERE|P.types.TRIMESH,planeTrimesh:P.types.PLANE|P.types.TRIMESH};class wi{get[H.sphereSphere](){return this.sphereSphere}get[H.spherePlane](){return this.spherePlane}get[H.boxBox](){return this.boxBox}get[H.sphereBox](){return this.sphereBox}get[H.planeBox](){return this.planeBox}get[H.convexConvex](){return this.convexConvex}get[H.sphereConvex](){return this.sphereConvex}get[H.planeConvex](){return this.planeConvex}get[H.boxConvex](){return this.boxConvex}get[H.sphereHeightfield](){return this.sphereHeightfield}get[H.boxHeightfield](){return this.boxHeightfield}get[H.convexHeightfield](){return this.convexHeightfield}get[H.sphereParticle](){return this.sphereParticle}get[H.planeParticle](){return this.planeParticle}get[H.boxParticle](){return this.boxParticle}get[H.convexParticle](){return this.convexParticle}get[H.cylinderCylinder](){return this.convexConvex}get[H.sphereCylinder](){return this.sphereConvex}get[H.planeCylinder](){return this.planeConvex}get[H.boxCylinder](){return this.boxConvex}get[H.convexCylinder](){return this.convexConvex}get[H.heightfieldCylinder](){return this.heightfieldCylinder}get[H.particleCylinder](){return this.particleCylinder}get[H.sphereTrimesh](){return this.sphereTrimesh}get[H.planeTrimesh](){return this.planeTrimesh}constructor(t){this.contactPointPool=[],this.frictionEquationPool=[],this.result=[],this.frictionResult=[],this.v3pool=new mi,this.world=t,this.currentContactMaterial=t.defaultContactMaterial,this.enableFrictionReduction=!1}createContactEquation(t,e,s,n,i,o){let r;this.contactPointPool.length?(r=this.contactPointPool.pop(),r.bi=t,r.bj=e):r=new In(t,e),r.enabled=t.collisionResponse&&e.collisionResponse&&s.collisionResponse&&n.collisionResponse;const l=this.currentContactMaterial;r.restitution=l.restitution,r.setSpookParams(l.contactEquationStiffness,l.contactEquationRelaxation,this.world.dt);const a=s.material||t.material,h=n.material||e.material;return a&&h&&a.restitution>=0&&h.restitution>=0&&(r.restitution=a.restitution*h.restitution),r.si=i||s,r.sj=o||n,r}createFrictionEquationsFromContact(t,e){const s=t.bi,n=t.bj,i=t.si,o=t.sj,r=this.world,l=this.currentContactMaterial;let a=l.friction;const h=i.material||s.material,u=o.material||n.material;if(h&&u&&h.friction>=0&&u.friction>=0&&(a=h.friction*u.friction),a>0){const c=a*(r.frictionGravity||r.gravity).length();let f=s.invMass+n.invMass;f>0&&(f=1/f);const p=this.frictionEquationPool,m=p.length?p.pop():new ke(s,n,c*f),v=p.length?p.pop():new ke(s,n,c*f);return m.bi=v.bi=s,m.bj=v.bj=n,m.minForce=v.minForce=-c*f,m.maxForce=v.maxForce=c*f,m.ri.copy(t.ri),m.rj.copy(t.rj),v.ri.copy(t.ri),v.rj.copy(t.rj),t.ni.tangents(m.t,v.t),m.setSpookParams(l.frictionEquationStiffness,l.frictionEquationRelaxation,r.dt),v.setSpookParams(l.frictionEquationStiffness,l.frictionEquationRelaxation,r.dt),m.enabled=v.enabled=t.enabled,e.push(m,v),!0}return!1}createFrictionFromAverage(t){let e=this.result[this.result.length-1];if(!this.createFrictionEquationsFromContact(e,this.frictionResult)||t===1)return;const s=this.frictionResult[this.frictionResult.length-2],n=this.frictionResult[this.frictionResult.length-1];vt.setZero(),bt.setZero(),Et.setZero();const i=e.bi;e.bj;for(let r=0;r!==t;r++)e=this.result[this.result.length-1-r],e.bi!==i?(vt.vadd(e.ni,vt),bt.vadd(e.ri,bt),Et.vadd(e.rj,Et)):(vt.vsub(e.ni,vt),bt.vadd(e.rj,bt),Et.vadd(e.ri,Et));const o=1/t;bt.scale(o,s.ri),Et.scale(o,s.rj),n.ri.copy(s.ri),n.rj.copy(s.rj),vt.normalize(),vt.tangents(s.t,n.t)}getContacts(t,e,s,n,i,o,r){this.contactPointPool=i,this.frictionEquationPool=r,this.result=n,this.frictionResult=o;const l=gi,a=xi,h=vi,u=yi;for(let c=0,f=t.length;c!==f;c++){const p=t[c],m=e[c];let v=null;p.material&&m.material&&(v=s.getContactMaterial(p.material,m.material)||null);const y=p.type&F.KINEMATIC&&m.type&F.STATIC||p.type&F.STATIC&&m.type&F.KINEMATIC||p.type&F.KINEMATIC&&m.type&F.KINEMATIC;for(let w=0;w<p.shapes.length;w++){p.quaternion.mult(p.shapeOrientations[w],l),p.quaternion.vmult(p.shapeOffsets[w],h),h.vadd(p.position,h);const x=p.shapes[w];for(let E=0;E<m.shapes.length;E++){m.quaternion.mult(m.shapeOrientations[E],a),m.quaternion.vmult(m.shapeOffsets[E],u),u.vadd(m.position,u);const _=m.shapes[E];if(!(x.collisionFilterMask&_.collisionFilterGroup&&_.collisionFilterMask&x.collisionFilterGroup)||h.distanceTo(u)>x.boundingSphereRadius+_.boundingSphereRadius)continue;let C=null;x.material&&_.material&&(C=s.getContactMaterial(x.material,_.material)||null),this.currentContactMaterial=C||v||s.defaultContactMaterial;const T=x.type|_.type,N=this[T];if(N){let R=!1;x.type<_.type?R=N.call(this,x,_,h,u,l,a,p,m,x,_,y):R=N.call(this,_,x,u,h,a,l,m,p,x,_,y),R&&y&&(s.shapeOverlapKeeper.set(x.id,_.id),s.bodyOverlapKeeper.set(p.id,m.id))}}}}}sphereSphere(t,e,s,n,i,o,r,l,a,h,u){if(u)return s.distanceSquared(n)<(t.radius+e.radius)**2;const c=this.createContactEquation(r,l,t,e,a,h);n.vsub(s,c.ni),c.ni.normalize(),c.ri.copy(c.ni),c.rj.copy(c.ni),c.ri.scale(t.radius,c.ri),c.rj.scale(-e.radius,c.rj),c.ri.vadd(s,c.ri),c.ri.vsub(r.position,c.ri),c.rj.vadd(n,c.rj),c.rj.vsub(l.position,c.rj),this.result.push(c),this.createFrictionEquationsFromContact(c,this.frictionResult)}spherePlane(t,e,s,n,i,o,r,l,a,h,u){const c=this.createContactEquation(r,l,t,e,a,h);if(c.ni.set(0,0,1),o.vmult(c.ni,c.ni),c.ni.negate(c.ni),c.ni.normalize(),c.ni.scale(t.radius,c.ri),s.vsub(n,Wt),c.ni.scale(c.ni.dot(Wt),Ye),Wt.vsub(Ye,c.rj),-Wt.dot(c.ni)<=t.radius){if(u)return!0;const f=c.ri,p=c.rj;f.vadd(s,f),f.vsub(r.position,f),p.vadd(n,p),p.vsub(l.position,p),this.result.push(c),this.createFrictionEquationsFromContact(c,this.frictionResult)}}boxBox(t,e,s,n,i,o,r,l,a,h,u){return t.convexPolyhedronRepresentation.material=t.material,e.convexPolyhedronRepresentation.material=e.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e.convexPolyhedronRepresentation,s,n,i,o,r,l,t,e,u)}sphereBox(t,e,s,n,i,o,r,l,a,h,u){const c=this.v3pool,f=Ui;s.vsub(n,Ht),e.getSideNormals(f,o);const p=t.radius;let m=!1;const v=$i,y=Xi,w=Ki;let x=null,E=0,_=0,C=0,T=null;for(let A=0,V=f.length;A!==V&&m===!1;A++){const q=Hi;q.copy(f[A]);const k=q.length();q.normalize();const W=Ht.dot(q);if(W<k+p&&W>0){const U=Gi,L=Di;U.copy(f[(A+1)%3]),L.copy(f[(A+2)%3]);const xt=U.length(),qt=L.length();U.normalize(),L.normalize();const te=Ht.dot(U),ee=Ht.dot(L);if(te<xt&&te>-xt&&ee<qt&&ee>-qt){const xe=Math.abs(W-k-p);if((T===null||xe<T)&&(T=xe,_=te,C=ee,x=k,v.copy(q),y.copy(U),w.copy(L),E++,u))return!0}}}if(E){m=!0;const A=this.createContactEquation(r,l,t,e,a,h);v.scale(-p,A.ri),A.ni.copy(v),A.ni.negate(A.ni),v.scale(x,v),y.scale(_,y),v.vadd(y,v),w.scale(C,w),v.vadd(w,A.rj),A.ri.vadd(s,A.ri),A.ri.vsub(r.position,A.ri),A.rj.vadd(n,A.rj),A.rj.vsub(l.position,A.rj),this.result.push(A),this.createFrictionEquationsFromContact(A,this.frictionResult)}let N=c.get();const R=Yi;for(let A=0;A!==2&&!m;A++)for(let V=0;V!==2&&!m;V++)for(let q=0;q!==2&&!m;q++)if(N.set(0,0,0),A?N.vadd(f[0],N):N.vsub(f[0],N),V?N.vadd(f[1],N):N.vsub(f[1],N),q?N.vadd(f[2],N):N.vsub(f[2],N),n.vadd(N,R),R.vsub(s,R),R.lengthSquared()<p*p){if(u)return!0;m=!0;const k=this.createContactEquation(r,l,t,e,a,h);k.ri.copy(R),k.ri.normalize(),k.ni.copy(k.ri),k.ri.scale(p,k.ri),k.rj.copy(N),k.ri.vadd(s,k.ri),k.ri.vsub(r.position,k.ri),k.rj.vadd(n,k.rj),k.rj.vsub(l.position,k.rj),this.result.push(k),this.createFrictionEquationsFromContact(k,this.frictionResult)}c.release(N),N=null;const z=c.get(),S=c.get(),I=c.get(),b=c.get(),M=c.get(),B=f.length;for(let A=0;A!==B&&!m;A++)for(let V=0;V!==B&&!m;V++)if(A%3!==V%3){f[V].cross(f[A],z),z.normalize(),f[A].vadd(f[V],S),I.copy(s),I.vsub(S,I),I.vsub(n,I);const q=I.dot(z);z.scale(q,b);let k=0;for(;k===A%3||k===V%3;)k++;M.copy(s),M.vsub(b,M),M.vsub(S,M),M.vsub(n,M);const W=Math.abs(q),U=M.length();if(W<f[k].length()&&U<p){if(u)return!0;m=!0;const L=this.createContactEquation(r,l,t,e,a,h);S.vadd(b,L.rj),L.rj.copy(L.rj),M.negate(L.ni),L.ni.normalize(),L.ri.copy(L.rj),L.ri.vadd(n,L.ri),L.ri.vsub(s,L.ri),L.ri.normalize(),L.ri.scale(p,L.ri),L.ri.vadd(s,L.ri),L.ri.vsub(r.position,L.ri),L.rj.vadd(n,L.rj),L.rj.vsub(l.position,L.rj),this.result.push(L),this.createFrictionEquationsFromContact(L,this.frictionResult)}}c.release(z,S,I,b,M)}planeBox(t,e,s,n,i,o,r,l,a,h,u){return e.convexPolyhedronRepresentation.material=e.material,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,e.convexPolyhedronRepresentation.id=e.id,this.planeConvex(t,e.convexPolyhedronRepresentation,s,n,i,o,r,l,t,e,u)}convexConvex(t,e,s,n,i,o,r,l,a,h,u,c,f){const p=uo;if(!(s.distanceTo(n)>t.boundingSphereRadius+e.boundingSphereRadius)&&t.findSeparatingAxis(e,s,i,n,o,p,c,f)){const m=[],v=fo;t.clipAgainstHull(s,i,e,n,o,p,-100,100,m);let y=0;for(let w=0;w!==m.length;w++){if(u)return!0;const x=this.createContactEquation(r,l,t,e,a,h),E=x.ri,_=x.rj;p.negate(x.ni),m[w].normal.negate(v),v.scale(m[w].depth,v),m[w].point.vadd(v,E),_.copy(m[w].point),E.vsub(s,E),_.vsub(n,_),E.vadd(s,E),E.vsub(r.position,E),_.vadd(n,_),_.vsub(l.position,_),this.result.push(x),y++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(x,this.frictionResult)}this.enableFrictionReduction&&y&&this.createFrictionFromAverage(y)}}sphereConvex(t,e,s,n,i,o,r,l,a,h,u){const c=this.v3pool;s.vsub(n,Zi);const f=e.faceNormals,p=e.faces,m=e.vertices,v=t.radius;let y=!1;for(let w=0;w!==m.length;w++){const x=m[w],E=eo;o.vmult(x,E),n.vadd(E,E);const _=to;if(E.vsub(s,_),_.lengthSquared()<v*v){if(u)return!0;y=!0;const C=this.createContactEquation(r,l,t,e,a,h);C.ri.copy(_),C.ri.normalize(),C.ni.copy(C.ri),C.ri.scale(v,C.ri),E.vsub(n,C.rj),C.ri.vadd(s,C.ri),C.ri.vsub(r.position,C.ri),C.rj.vadd(n,C.rj),C.rj.vsub(l.position,C.rj),this.result.push(C),this.createFrictionEquationsFromContact(C,this.frictionResult);return}}for(let w=0,x=p.length;w!==x&&y===!1;w++){const E=f[w],_=p[w],C=so;o.vmult(E,C);const T=no;o.vmult(m[_[0]],T),T.vadd(n,T);const N=io;C.scale(-v,N),s.vadd(N,N);const R=oo;N.vsub(T,R);const z=R.dot(C),S=ro;if(s.vsub(T,S),z<0&&S.dot(C)>0){const I=[];for(let b=0,M=_.length;b!==M;b++){const B=c.get();o.vmult(m[_[b]],B),n.vadd(B,B),I.push(B)}if(Wi(I,C,s)){if(u)return!0;y=!0;const b=this.createContactEquation(r,l,t,e,a,h);C.scale(-v,b.ri),C.negate(b.ni);const M=c.get();C.scale(-z,M);const B=c.get();C.scale(-v,B),s.vsub(n,b.rj),b.rj.vadd(B,b.rj),b.rj.vadd(M,b.rj),b.rj.vadd(n,b.rj),b.rj.vsub(l.position,b.rj),b.ri.vadd(s,b.ri),b.ri.vsub(r.position,b.ri),c.release(M),c.release(B),this.result.push(b),this.createFrictionEquationsFromContact(b,this.frictionResult);for(let A=0,V=I.length;A!==V;A++)c.release(I[A]);return}else for(let b=0;b!==_.length;b++){const M=c.get(),B=c.get();o.vmult(m[_[(b+1)%_.length]],M),o.vmult(m[_[(b+2)%_.length]],B),n.vadd(M,M),n.vadd(B,B);const A=Qi;B.vsub(M,A);const V=Ji;A.unit(V);const q=c.get(),k=c.get();s.vsub(M,k);const W=k.dot(V);V.scale(W,q),q.vadd(M,q);const U=c.get();if(q.vsub(s,U),W>0&&W*W<A.lengthSquared()&&U.lengthSquared()<v*v){if(u)return!0;const L=this.createContactEquation(r,l,t,e,a,h);q.vsub(n,L.rj),q.vsub(s,L.ni),L.ni.normalize(),L.ni.scale(v,L.ri),L.rj.vadd(n,L.rj),L.rj.vsub(l.position,L.rj),L.ri.vadd(s,L.ri),L.ri.vsub(r.position,L.ri),this.result.push(L),this.createFrictionEquationsFromContact(L,this.frictionResult);for(let xt=0,qt=I.length;xt!==qt;xt++)c.release(I[xt]);c.release(M),c.release(B),c.release(q),c.release(U),c.release(k);return}c.release(M),c.release(B),c.release(q),c.release(U),c.release(k)}for(let b=0,M=I.length;b!==M;b++)c.release(I[b])}}}planeConvex(t,e,s,n,i,o,r,l,a,h,u){const c=lo,f=ao;f.set(0,0,1),i.vmult(f,f);let p=0;const m=co;for(let v=0;v!==e.vertices.length;v++)if(c.copy(e.vertices[v]),o.vmult(c,c),n.vadd(c,c),c.vsub(s,m),f.dot(m)<=0){if(u)return!0;const w=this.createContactEquation(r,l,t,e,a,h),x=ho;f.scale(f.dot(m),x),c.vsub(x,x),x.vsub(s,w.ri),w.ni.copy(f),c.vsub(n,w.rj),w.ri.vadd(s,w.ri),w.ri.vsub(r.position,w.ri),w.rj.vadd(n,w.rj),w.rj.vsub(l.position,w.rj),this.result.push(w),p++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(w,this.frictionResult)}this.enableFrictionReduction&&p&&this.createFrictionFromAverage(p)}boxConvex(t,e,s,n,i,o,r,l,a,h,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e,s,n,i,o,r,l,t,e,u)}sphereHeightfield(t,e,s,n,i,o,r,l,a,h,u){const c=e.data,f=t.radius,p=e.elementSize,m=Co,v=zo;O.pointToLocalFrame(n,o,s,v);let y=Math.floor((v.x-f)/p)-1,w=Math.ceil((v.x+f)/p)+1,x=Math.floor((v.y-f)/p)-1,E=Math.ceil((v.y+f)/p)+1;if(w<0||E<0||y>c.length||x>c[0].length)return;y<0&&(y=0),w<0&&(w=0),x<0&&(x=0),E<0&&(E=0),y>=c.length&&(y=c.length-1),w>=c.length&&(w=c.length-1),E>=c[0].length&&(E=c[0].length-1),x>=c[0].length&&(x=c[0].length-1);const _=[];e.getRectMinMax(y,x,w,E,_);const C=_[0],T=_[1];if(v.z-f>T||v.z+f<C)return;const N=this.result;for(let R=y;R<w;R++)for(let z=x;z<E;z++){const S=N.length;let I=!1;if(e.getConvexTrianglePillar(R,z,!1),O.pointToWorldFrame(n,o,e.pillarOffset,m),s.distanceTo(m)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(I=this.sphereConvex(t,e.pillarConvex,s,m,i,o,r,l,t,e,u)),u&&I||(e.getConvexTrianglePillar(R,z,!0),O.pointToWorldFrame(n,o,e.pillarOffset,m),s.distanceTo(m)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(I=this.sphereConvex(t,e.pillarConvex,s,m,i,o,r,l,t,e,u)),u&&I))return!0;if(N.length-S>2)return}}boxHeightfield(t,e,s,n,i,o,r,l,a,h,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexHeightfield(t.convexPolyhedronRepresentation,e,s,n,i,o,r,l,t,e,u)}convexHeightfield(t,e,s,n,i,o,r,l,a,h,u){const c=e.data,f=e.elementSize,p=t.boundingSphereRadius,m=Eo,v=_o,y=bo;O.pointToLocalFrame(n,o,s,y);let w=Math.floor((y.x-p)/f)-1,x=Math.ceil((y.x+p)/f)+1,E=Math.floor((y.y-p)/f)-1,_=Math.ceil((y.y+p)/f)+1;if(x<0||_<0||w>c.length||E>c[0].length)return;w<0&&(w=0),x<0&&(x=0),E<0&&(E=0),_<0&&(_=0),w>=c.length&&(w=c.length-1),x>=c.length&&(x=c.length-1),_>=c[0].length&&(_=c[0].length-1),E>=c[0].length&&(E=c[0].length-1);const C=[];e.getRectMinMax(w,E,x,_,C);const T=C[0],N=C[1];if(!(y.z-p>N||y.z+p<T))for(let R=w;R<x;R++)for(let z=E;z<_;z++){let S=!1;if(e.getConvexTrianglePillar(R,z,!1),O.pointToWorldFrame(n,o,e.pillarOffset,m),s.distanceTo(m)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(S=this.convexConvex(t,e.pillarConvex,s,m,i,o,r,l,null,null,u,v,null)),u&&S||(e.getConvexTrianglePillar(R,z,!0),O.pointToWorldFrame(n,o,e.pillarOffset,m),s.distanceTo(m)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(S=this.convexConvex(t,e.pillarConvex,s,m,i,o,r,l,null,null,u,v,null)),u&&S))return!0}}sphereParticle(t,e,s,n,i,o,r,l,a,h,u){const c=vo;if(c.set(0,0,1),n.vsub(s,c),c.lengthSquared()<=t.radius*t.radius){if(u)return!0;const p=this.createContactEquation(l,r,e,t,a,h);c.normalize(),p.rj.copy(c),p.rj.scale(t.radius,p.rj),p.ni.copy(c),p.ni.negate(p.ni),p.ri.set(0,0,0),this.result.push(p),this.createFrictionEquationsFromContact(p,this.frictionResult)}}planeParticle(t,e,s,n,i,o,r,l,a,h,u){const c=po;c.set(0,0,1),r.quaternion.vmult(c,c);const f=mo;if(n.vsub(r.position,f),c.dot(f)<=0){if(u)return!0;const m=this.createContactEquation(l,r,e,t,a,h);m.ni.copy(c),m.ni.negate(m.ni),m.ri.set(0,0,0);const v=wo;c.scale(c.dot(n),v),n.vsub(v,v),m.rj.copy(v),this.result.push(m),this.createFrictionEquationsFromContact(m,this.frictionResult)}}boxParticle(t,e,s,n,i,o,r,l,a,h,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexParticle(t.convexPolyhedronRepresentation,e,s,n,i,o,r,l,t,e,u)}convexParticle(t,e,s,n,i,o,r,l,a,h,u){let c=-1;const f=go,p=xo;let m=null;const v=yo;if(v.copy(n),v.vsub(s,v),i.conjugate($e),$e.vmult(v,v),t.pointIsInside(v)){t.worldVerticesNeedsUpdate&&t.computeWorldVertices(s,i),t.worldFaceNormalsNeedsUpdate&&t.computeWorldFaceNormals(i);for(let y=0,w=t.faces.length;y!==w;y++){const x=[t.worldVertices[t.faces[y][0]]],E=t.worldFaceNormals[y];n.vsub(x[0],Xe);const _=-E.dot(Xe);if(m===null||Math.abs(_)<Math.abs(m)){if(u)return!0;m=_,c=y,f.copy(E)}}if(c!==-1){const y=this.createContactEquation(l,r,e,t,a,h);f.scale(m,p),p.vadd(n,p),p.vsub(s,p),y.rj.copy(p),f.negate(y.ni),y.ri.set(0,0,0);const w=y.ri,x=y.rj;w.vadd(n,w),w.vsub(l.position,w),x.vadd(s,x),x.vsub(r.position,x),this.result.push(y),this.createFrictionEquationsFromContact(y,this.frictionResult)}else console.warn("Point found inside convex, but did not find penetrating face!")}}heightfieldCylinder(t,e,s,n,i,o,r,l,a,h,u){return this.convexHeightfield(e,t,n,s,o,i,l,r,a,h,u)}particleCylinder(t,e,s,n,i,o,r,l,a,h,u){return this.convexParticle(e,t,n,s,o,i,l,r,a,h,u)}sphereTrimesh(t,e,s,n,i,o,r,l,a,h,u){const c=Ti,f=Si,p=Bi,m=Pi,v=Ni,y=Ii,w=Vi,x=Mi,E=Ci,_=Li;O.pointToLocalFrame(n,o,s,v);const C=t.radius;w.lowerBound.set(v.x-C,v.y-C,v.z-C),w.upperBound.set(v.x+C,v.y+C,v.z+C),e.getTrianglesInAABB(w,_);const T=Ai,N=t.radius*t.radius;for(let b=0;b<_.length;b++)for(let M=0;M<3;M++)if(e.getVertex(e.indices[_[b]*3+M],T),T.vsub(v,E),E.lengthSquared()<=N){if(x.copy(T),O.pointToWorldFrame(n,o,x,T),T.vsub(s,E),u)return!0;let B=this.createContactEquation(r,l,t,e,a,h);B.ni.copy(E),B.ni.normalize(),B.ri.copy(B.ni),B.ri.scale(t.radius,B.ri),B.ri.vadd(s,B.ri),B.ri.vsub(r.position,B.ri),B.rj.copy(T),B.rj.vsub(l.position,B.rj),this.result.push(B),this.createFrictionEquationsFromContact(B,this.frictionResult)}for(let b=0;b<_.length;b++)for(let M=0;M<3;M++){e.getVertex(e.indices[_[b]*3+M],c),e.getVertex(e.indices[_[b]*3+(M+1)%3],f),f.vsub(c,p),v.vsub(f,y);const B=y.dot(p);v.vsub(c,y);let A=y.dot(p);if(A>0&&B<0&&(v.vsub(c,y),m.copy(p),m.normalize(),A=y.dot(m),m.scale(A,y),y.vadd(c,y),y.distanceTo(v)<t.radius)){if(u)return!0;const q=this.createContactEquation(r,l,t,e,a,h);y.vsub(v,q.ni),q.ni.normalize(),q.ni.scale(t.radius,q.ri),q.ri.vadd(s,q.ri),q.ri.vsub(r.position,q.ri),O.pointToWorldFrame(n,o,y,y),y.vsub(l.position,q.rj),O.vectorToWorldFrame(o,q.ni,q.ni),O.vectorToWorldFrame(o,q.ri,q.ri),this.result.push(q),this.createFrictionEquationsFromContact(q,this.frictionResult)}}const R=Fi,z=Ri,S=qi,I=zi;for(let b=0,M=_.length;b!==M;b++){e.getTriangleVertices(_[b],R,z,S),e.getNormal(_[b],I),v.vsub(R,y);let B=y.dot(I);if(I.scale(B,y),v.vsub(y,y),B=y.distanceTo(v),Y.pointInTriangle(y,R,z,S)&&B<t.radius){if(u)return!0;let A=this.createContactEquation(r,l,t,e,a,h);y.vsub(v,A.ni),A.ni.normalize(),A.ni.scale(t.radius,A.ri),A.ri.vadd(s,A.ri),A.ri.vsub(r.position,A.ri),O.pointToWorldFrame(n,o,y,y),y.vsub(l.position,A.rj),O.vectorToWorldFrame(o,A.ni,A.ni),O.vectorToWorldFrame(o,A.ri,A.ri),this.result.push(A),this.createFrictionEquationsFromContact(A,this.frictionResult)}}_.length=0}planeTrimesh(t,e,s,n,i,o,r,l,a,h,u){const c=new d,f=bi;f.set(0,0,1),i.vmult(f,f);for(let p=0;p<e.vertices.length/3;p++){e.getVertex(p,c);const m=new d;m.copy(c),O.pointToWorldFrame(n,o,m,c);const v=Ei;if(c.vsub(s,v),f.dot(v)<=0){if(u)return!0;const w=this.createContactEquation(r,l,t,e,a,h);w.ni.copy(f);const x=_i;f.scale(v.dot(f),x),c.vsub(x,x),w.ri.copy(x),w.ri.vsub(r.position,w.ri),w.rj.copy(c),w.rj.vsub(l.position,w.rj),this.result.push(w),this.createFrictionEquationsFromContact(w,this.frictionResult)}}}}const vt=new d,bt=new d,Et=new d,vi=new d,yi=new d,gi=new D,xi=new D,bi=new d,Ei=new d,_i=new d,zi=new d,Ci=new d;new d;const Ai=new d,Mi=new d,Ti=new d,Si=new d,Bi=new d,Pi=new d,Ni=new d,Ii=new d,Fi=new d,Ri=new d,qi=new d,Vi=new G,Li=[],Wt=new d,Ye=new d,ki=new d,ji=new d,Oi=new d;function Wi(g,t,e){let s=null;const n=g.length;for(let i=0;i!==n;i++){const o=g[i],r=ki;g[(i+1)%n].vsub(o,r);const l=ji;r.cross(t,l);const a=Oi;e.vsub(o,a);const h=l.dot(a);if(s===null||h>0&&s===!0||h<=0&&s===!1){s===null&&(s=h>0);continue}else return!1}return!0}const Ht=new d,Hi=new d,Gi=new d,Di=new d,Ui=[new d,new d,new d,new d,new d,new d],Yi=new d,$i=new d,Xi=new d,Ki=new d,Zi=new d,Qi=new d,Ji=new d,to=new d,eo=new d,so=new d,no=new d,io=new d,oo=new d,ro=new d;new d;new d;const lo=new d,ao=new d,co=new d,ho=new d,uo=new d,fo=new d,po=new d,mo=new d,wo=new d,vo=new d,$e=new D,yo=new d;new d;const go=new d,Xe=new d,xo=new d,bo=new d,Eo=new d,_o=[0],zo=new d,Co=new d;class Ke{constructor(){this.current=[],this.previous=[]}getKey(t,e){if(e<t){const s=e;e=t,t=s}return t<<16|e}set(t,e){const s=this.getKey(t,e),n=this.current;let i=0;for(;s>n[i];)i++;if(s!==n[i]){for(let o=n.length-1;o>=i;o--)n[o+1]=n[o];n[i]=s}}tick(){const t=this.current;this.current=this.previous,this.previous=t,this.current.length=0}getDiff(t,e){const s=this.current,n=this.previous,i=s.length,o=n.length;let r=0;for(let l=0;l<i;l++){let a=!1;const h=s[l];for(;h>n[r];)r++;a=h===n[r],a||Ze(t,h)}r=0;for(let l=0;l<o;l++){let a=!1;const h=n[l];for(;h>s[r];)r++;a=s[r]===h,a||Ze(e,h)}}}function Ze(g,t){g.push((t&4294901760)>>16,t&65535)}const re=(g,t)=>g<t?`${g}-${t}`:`${t}-${g}`;class Ao{constructor(){this.data={keys:[]}}get(t,e){const s=re(t,e);return this.data[s]}set(t,e,s){const n=re(t,e);this.get(t,e)||this.data.keys.push(n),this.data[n]=s}delete(t,e){const s=re(t,e),n=this.data.keys.indexOf(s);n!==-1&&this.data.keys.splice(n,1),delete this.data[s]}reset(){const t=this.data,e=t.keys;for(;e.length>0;){const s=e.pop();delete t[s]}}}class Mo extends cs{constructor(t){t===void 0&&(t={}),super(),this.dt=-1,this.allowSleep=!!t.allowSleep,this.contacts=[],this.frictionEquations=[],this.quatNormalizeSkip=t.quatNormalizeSkip!==void 0?t.quatNormalizeSkip:0,this.quatNormalizeFast=t.quatNormalizeFast!==void 0?t.quatNormalizeFast:!1,this.time=0,this.stepnumber=0,this.default_dt=1/60,this.nextId=0,this.gravity=new d,t.gravity&&this.gravity.copy(t.gravity),t.frictionGravity&&(this.frictionGravity=new d,this.frictionGravity.copy(t.frictionGravity)),this.broadphase=t.broadphase!==void 0?t.broadphase:new mn,this.bodies=[],this.hasActiveBodies=!1,this.solver=t.solver!==void 0?t.solver:new hi,this.constraints=[],this.narrowphase=new wi(this),this.collisionMatrix=new Se,this.collisionMatrixPrevious=new Se,this.bodyOverlapKeeper=new Ke,this.shapeOverlapKeeper=new Ke,this.contactmaterials=[],this.contactMaterialTable=new Ao,this.defaultMaterial=new Jt("default"),this.defaultContactMaterial=new Qt(this.defaultMaterial,this.defaultMaterial,{friction:.3,restitution:0}),this.doProfiling=!1,this.profile={solve:0,makeContactConstraints:0,broadphase:0,integrate:0,narrowphase:0},this.accumulator=0,this.subsystems=[],this.addBodyEvent={type:"addBody",body:null},this.removeBodyEvent={type:"removeBody",body:null},this.idToBodyMap={},this.broadphase.setWorld(this)}getContactMaterial(t,e){return this.contactMaterialTable.get(t.id,e.id)}collisionMatrixTick(){const t=this.collisionMatrixPrevious;this.collisionMatrixPrevious=this.collisionMatrix,this.collisionMatrix=t,this.collisionMatrix.reset(),this.bodyOverlapKeeper.tick(),this.shapeOverlapKeeper.tick()}addConstraint(t){this.constraints.push(t)}removeConstraint(t){const e=this.constraints.indexOf(t);e!==-1&&this.constraints.splice(e,1)}rayTest(t,e,s){s instanceof Xt?this.raycastClosest(t,e,{skipBackfaces:!0},s):this.raycastAll(t,e,{skipBackfaces:!0},s)}raycastAll(t,e,s,n){return s===void 0&&(s={}),s.mode=Y.ALL,s.from=t,s.to=e,s.callback=n,le.intersectWorld(this,s)}raycastAny(t,e,s,n){return s===void 0&&(s={}),s.mode=Y.ANY,s.from=t,s.to=e,s.result=n,le.intersectWorld(this,s)}raycastClosest(t,e,s,n){return s===void 0&&(s={}),s.mode=Y.CLOSEST,s.from=t,s.to=e,s.result=n,le.intersectWorld(this,s)}addBody(t){this.bodies.includes(t)||(t.index=this.bodies.length,this.bodies.push(t),t.world=this,t.initPosition.copy(t.position),t.initVelocity.copy(t.velocity),t.timeLastSleepy=this.time,t instanceof F&&(t.initAngularVelocity.copy(t.angularVelocity),t.initQuaternion.copy(t.quaternion)),this.collisionMatrix.setNumObjects(this.bodies.length),this.addBodyEvent.body=t,this.idToBodyMap[t.id]=t,this.dispatchEvent(this.addBodyEvent))}removeBody(t){t.world=null;const e=this.bodies.length-1,s=this.bodies,n=s.indexOf(t);if(n!==-1){s.splice(n,1);for(let i=0;i!==s.length;i++)s[i].index=i;this.collisionMatrix.setNumObjects(e),this.removeBodyEvent.body=t,delete this.idToBodyMap[t.id],this.dispatchEvent(this.removeBodyEvent)}}getBodyById(t){return this.idToBodyMap[t]}getShapeById(t){const e=this.bodies;for(let s=0;s<e.length;s++){const n=e[s].shapes;for(let i=0;i<n.length;i++){const o=n[i];if(o.id===t)return o}}return null}addContactMaterial(t){this.contactmaterials.push(t),this.contactMaterialTable.set(t.materials[0].id,t.materials[1].id,t)}removeContactMaterial(t){const e=this.contactmaterials.indexOf(t);e!==-1&&(this.contactmaterials.splice(e,1),this.contactMaterialTable.delete(t.materials[0].id,t.materials[1].id))}fixedStep(t,e){t===void 0&&(t=1/60),e===void 0&&(e=10);const s=$.now()/1e3;if(!this.lastCallTime)this.step(t,void 0,e);else{const n=s-this.lastCallTime;this.step(t,n,e)}this.lastCallTime=s}step(t,e,s){if(s===void 0&&(s=10),e===void 0)this.internalStep(t),this.time+=t;else{this.accumulator+=e;const n=$.now();let i=0;for(;this.accumulator>=t&&i<s&&(this.internalStep(t),this.accumulator-=t,i++,!($.now()-n>t*1e3)););this.accumulator=this.accumulator%t;const o=this.accumulator/t;for(let r=0;r!==this.bodies.length;r++){const l=this.bodies[r];l.previousPosition.lerp(l.position,o,l.interpolatedPosition),l.previousQuaternion.slerp(l.quaternion,o,l.interpolatedQuaternion),l.previousQuaternion.normalize()}this.time+=e}}internalStep(t){this.dt=t;const e=this.contacts,s=No,n=Io,i=this.bodies.length,o=this.bodies,r=this.solver,l=this.gravity,a=this.doProfiling,h=this.profile,u=F.DYNAMIC;let c=-1/0;const f=this.constraints,p=Po;l.length();const m=l.x,v=l.y,y=l.z;let w=0;for(a&&(c=$.now()),w=0;w!==i;w++){const b=o[w];if(b.type===u){const M=b.force,B=b.mass;M.x+=B*m,M.y+=B*v,M.z+=B*y}}for(let b=0,M=this.subsystems.length;b!==M;b++)this.subsystems[b].update();a&&(c=$.now()),s.length=0,n.length=0,this.broadphase.collisionPairs(this,s,n),a&&(h.broadphase=$.now()-c);let x=f.length;for(w=0;w!==x;w++){const b=f[w];if(!b.collideConnected)for(let M=s.length-1;M>=0;M-=1)(b.bodyA===s[M]&&b.bodyB===n[M]||b.bodyB===s[M]&&b.bodyA===n[M])&&(s.splice(M,1),n.splice(M,1))}this.collisionMatrixTick(),a&&(c=$.now());const E=Bo,_=e.length;for(w=0;w!==_;w++)E.push(e[w]);e.length=0;const C=this.frictionEquations.length;for(w=0;w!==C;w++)p.push(this.frictionEquations[w]);for(this.frictionEquations.length=0,this.narrowphase.getContacts(s,n,this,e,E,this.frictionEquations,p),a&&(h.narrowphase=$.now()-c),a&&(c=$.now()),w=0;w<this.frictionEquations.length;w++)r.addEquation(this.frictionEquations[w]);const T=e.length;for(let b=0;b!==T;b++){const M=e[b],B=M.bi,A=M.bj,V=M.si,q=M.sj;let k;if(B.material&&A.material?k=this.getContactMaterial(B.material,A.material)||this.defaultContactMaterial:k=this.defaultContactMaterial,k.friction,B.material&&A.material&&(B.material.friction>=0&&A.material.friction>=0&&B.material.friction*A.material.friction,B.material.restitution>=0&&A.material.restitution>=0&&(M.restitution=B.material.restitution*A.material.restitution)),r.addEquation(M),B.allowSleep&&B.type===F.DYNAMIC&&B.sleepState===F.SLEEPING&&A.sleepState===F.AWAKE&&A.type!==F.STATIC){const W=A.velocity.lengthSquared()+A.angularVelocity.lengthSquared(),U=A.sleepSpeedLimit**2;W>=U*2&&(B.wakeUpAfterNarrowphase=!0)}if(A.allowSleep&&A.type===F.DYNAMIC&&A.sleepState===F.SLEEPING&&B.sleepState===F.AWAKE&&B.type!==F.STATIC){const W=B.velocity.lengthSquared()+B.angularVelocity.lengthSquared(),U=B.sleepSpeedLimit**2;W>=U*2&&(A.wakeUpAfterNarrowphase=!0)}this.collisionMatrix.set(B,A,!0),this.collisionMatrixPrevious.get(B,A)||(Mt.body=A,Mt.contact=M,B.dispatchEvent(Mt),Mt.body=B,A.dispatchEvent(Mt)),this.bodyOverlapKeeper.set(B.id,A.id),this.shapeOverlapKeeper.set(V.id,q.id)}for(this.emitContactEvents(),a&&(h.makeContactConstraints=$.now()-c,c=$.now()),w=0;w!==i;w++){const b=o[w];b.wakeUpAfterNarrowphase&&(b.wakeUp(),b.wakeUpAfterNarrowphase=!1)}for(x=f.length,w=0;w!==x;w++){const b=f[w];b.update();for(let M=0,B=b.equations.length;M!==B;M++){const A=b.equations[M];r.addEquation(A)}}r.solve(t,this),a&&(h.solve=$.now()-c),r.removeAllEquations();const N=Math.pow;for(w=0;w!==i;w++){const b=o[w];if(b.type&u){const M=N(1-b.linearDamping,t),B=b.velocity;B.scale(M,B);const A=b.angularVelocity;if(A){const V=N(1-b.angularDamping,t);A.scale(V,A)}}}this.dispatchEvent(So),a&&(c=$.now());const z=this.stepnumber%(this.quatNormalizeSkip+1)===0,S=this.quatNormalizeFast;for(w=0;w!==i;w++)o[w].integrate(t,z,S);this.clearForces(),this.broadphase.dirty=!0,a&&(h.integrate=$.now()-c),this.stepnumber+=1,this.dispatchEvent(To);let I=!0;if(this.allowSleep)for(I=!1,w=0;w!==i;w++){const b=o[w];b.sleepTick(this.time),b.sleepState!==F.SLEEPING&&(I=!0)}this.hasActiveBodies=I}emitContactEvents(){const t=this.hasAnyEventListener("beginContact"),e=this.hasAnyEventListener("endContact");if((t||e)&&this.bodyOverlapKeeper.getDiff(at,ct),t){for(let i=0,o=at.length;i<o;i+=2)Tt.bodyA=this.getBodyById(at[i]),Tt.bodyB=this.getBodyById(at[i+1]),this.dispatchEvent(Tt);Tt.bodyA=Tt.bodyB=null}if(e){for(let i=0,o=ct.length;i<o;i+=2)St.bodyA=this.getBodyById(ct[i]),St.bodyB=this.getBodyById(ct[i+1]),this.dispatchEvent(St);St.bodyA=St.bodyB=null}at.length=ct.length=0;const s=this.hasAnyEventListener("beginShapeContact"),n=this.hasAnyEventListener("endShapeContact");if((s||n)&&this.shapeOverlapKeeper.getDiff(at,ct),s){for(let i=0,o=at.length;i<o;i+=2){const r=this.getShapeById(at[i]),l=this.getShapeById(at[i+1]);ht.shapeA=r,ht.shapeB=l,r&&(ht.bodyA=r.body),l&&(ht.bodyB=l.body),this.dispatchEvent(ht)}ht.bodyA=ht.bodyB=ht.shapeA=ht.shapeB=null}if(n){for(let i=0,o=ct.length;i<o;i+=2){const r=this.getShapeById(ct[i]),l=this.getShapeById(ct[i+1]);ut.shapeA=r,ut.shapeB=l,r&&(ut.bodyA=r.body),l&&(ut.bodyB=l.body),this.dispatchEvent(ut)}ut.bodyA=ut.bodyB=ut.shapeA=ut.shapeB=null}}clearForces(){const t=this.bodies,e=t.length;for(let s=0;s!==e;s++){const n=t[s];n.force,n.torque,n.force.set(0,0,0),n.torque.set(0,0,0)}}}new G;const le=new Y,$=globalThis.performance||{};if(!$.now){let g=Date.now();$.timing&&$.timing.navigationStart&&(g=$.timing.navigationStart),$.now=()=>Date.now()-g}new d;const To={type:"postStep"},So={type:"preStep"},Mt={type:F.COLLIDE_EVENT_NAME,body:null,contact:null},Bo=[],Po=[],No=[],Io=[],at=[],ct=[],Tt={type:"beginContact",bodyA:null,bodyB:null},St={type:"endContact",bodyA:null,bodyB:null},ht={type:"beginShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null},ut={type:"endShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null};class Fo{constructor(){j(this,"ui");j(this,"stats")}begin(){this.stats&&this.stats.begin()}end(){this.stats&&this.stats.end()}}class Ro{constructor(){const t=new Rt,e=t.scene,s=t.physics,n=new $t(100,100),i=new bs({}),o=new et(n,i);o.receiveShadow=!0,o.rotateX(-Math.PI*.5),o.position.y=-3,e.add(o);const r=new ys,l=new F({mass:0});l.addShape(r),s.addBody(l),l.position.set(o.position.x,o.position.y,o.position.z),l.quaternion.set(o.quaternion.x,o.quaternion.y,o.quaternion.z,o.quaternion.w)}}const ft=11102230246251565e-32,X=134217729,qo=(3+8*ft)*ft;function ae(g,t,e,s,n){let i,o,r,l,a=t[0],h=s[0],u=0,c=0;h>a==h>-a?(i=a,a=t[++u]):(i=h,h=s[++c]);let f=0;if(u<g&&c<e)for(h>a==h>-a?(o=a+i,r=i-(o-a),a=t[++u]):(o=h+i,r=i-(o-h),h=s[++c]),i=o,r!==0&&(n[f++]=r);u<g&&c<e;)h>a==h>-a?(o=i+a,l=o-i,r=i-(o-l)+(a-l),a=t[++u]):(o=i+h,l=o-i,r=i-(o-l)+(h-l),h=s[++c]),i=o,r!==0&&(n[f++]=r);for(;u<g;)o=i+a,l=o-i,r=i-(o-l)+(a-l),a=t[++u],i=o,r!==0&&(n[f++]=r);for(;c<e;)o=i+h,l=o-i,r=i-(o-l)+(h-l),h=s[++c],i=o,r!==0&&(n[f++]=r);return(i!==0||f===0)&&(n[f++]=i),f}function Vo(g,t){let e=t[0];for(let s=1;s<g;s++)e+=t[s];return e}function Ft(g){return new Float64Array(g)}const Lo=(3+16*ft)*ft,ko=(2+12*ft)*ft,jo=(9+64*ft)*ft*ft,_t=Ft(4),Qe=Ft(8),Je=Ft(12),ts=Ft(16),Z=Ft(4);function Oo(g,t,e,s,n,i,o){let r,l,a,h,u,c,f,p,m,v,y,w,x,E,_,C,T,N;const R=g-n,z=e-n,S=t-i,I=s-i;E=R*I,c=X*R,f=c-(c-R),p=R-f,c=X*I,m=c-(c-I),v=I-m,_=p*v-(E-f*m-p*m-f*v),C=S*z,c=X*S,f=c-(c-S),p=S-f,c=X*z,m=c-(c-z),v=z-m,T=p*v-(C-f*m-p*m-f*v),y=_-T,u=_-y,_t[0]=_-(y+u)+(u-T),w=E+y,u=w-E,x=E-(w-u)+(y-u),y=x-C,u=x-y,_t[1]=x-(y+u)+(u-C),N=w+y,u=N-w,_t[2]=w-(N-u)+(y-u),_t[3]=N;let b=Vo(4,_t),M=ko*o;if(b>=M||-b>=M||(u=g-R,r=g-(R+u)+(u-n),u=e-z,a=e-(z+u)+(u-n),u=t-S,l=t-(S+u)+(u-i),u=s-I,h=s-(I+u)+(u-i),r===0&&l===0&&a===0&&h===0)||(M=jo*o+qo*Math.abs(b),b+=R*h+I*r-(S*a+z*l),b>=M||-b>=M))return b;E=r*I,c=X*r,f=c-(c-r),p=r-f,c=X*I,m=c-(c-I),v=I-m,_=p*v-(E-f*m-p*m-f*v),C=l*z,c=X*l,f=c-(c-l),p=l-f,c=X*z,m=c-(c-z),v=z-m,T=p*v-(C-f*m-p*m-f*v),y=_-T,u=_-y,Z[0]=_-(y+u)+(u-T),w=E+y,u=w-E,x=E-(w-u)+(y-u),y=x-C,u=x-y,Z[1]=x-(y+u)+(u-C),N=w+y,u=N-w,Z[2]=w-(N-u)+(y-u),Z[3]=N;const B=ae(4,_t,4,Z,Qe);E=R*h,c=X*R,f=c-(c-R),p=R-f,c=X*h,m=c-(c-h),v=h-m,_=p*v-(E-f*m-p*m-f*v),C=S*a,c=X*S,f=c-(c-S),p=S-f,c=X*a,m=c-(c-a),v=a-m,T=p*v-(C-f*m-p*m-f*v),y=_-T,u=_-y,Z[0]=_-(y+u)+(u-T),w=E+y,u=w-E,x=E-(w-u)+(y-u),y=x-C,u=x-y,Z[1]=x-(y+u)+(u-C),N=w+y,u=N-w,Z[2]=w-(N-u)+(y-u),Z[3]=N;const A=ae(B,Qe,4,Z,Je);E=r*h,c=X*r,f=c-(c-r),p=r-f,c=X*h,m=c-(c-h),v=h-m,_=p*v-(E-f*m-p*m-f*v),C=l*a,c=X*l,f=c-(c-l),p=l-f,c=X*a,m=c-(c-a),v=a-m,T=p*v-(C-f*m-p*m-f*v),y=_-T,u=_-y,Z[0]=_-(y+u)+(u-T),w=E+y,u=w-E,x=E-(w-u)+(y-u),y=x-C,u=x-y,Z[1]=x-(y+u)+(u-C),N=w+y,u=N-w,Z[2]=w-(N-u)+(y-u),Z[3]=N;const V=ae(A,Je,4,Z,ts);return ts[V-1]}function Gt(g,t,e,s,n,i){const o=(t-i)*(e-n),r=(g-n)*(s-i),l=o-r;if(o===0||r===0||o>0!=r>0)return l;const a=Math.abs(o+r);return Math.abs(l)>=Lo*a?l:-Oo(g,t,e,s,n,i,a)}const es=Math.pow(2,-52),Dt=new Uint32Array(512);class Kt{static from(t,e=Uo,s=Yo){const n=t.length,i=new Float64Array(n*2);for(let o=0;o<n;o++){const r=t[o];i[2*o]=e(r),i[2*o+1]=s(r)}return new Kt(i)}constructor(t){const e=t.length>>1;if(e>0&&typeof t[0]!="number")throw new Error("Expected coords to contain numbers.");this.coords=t;const s=Math.max(2*e-5,0);this._triangles=new Uint32Array(s*3),this._halfedges=new Int32Array(s*3),this._hashSize=Math.ceil(Math.sqrt(e)),this._hullPrev=new Uint32Array(e),this._hullNext=new Uint32Array(e),this._hullTri=new Uint32Array(e),this._hullHash=new Int32Array(this._hashSize).fill(-1),this._ids=new Uint32Array(e),this._dists=new Float64Array(e),this.update()}update(){const{coords:t,_hullPrev:e,_hullNext:s,_hullTri:n,_hullHash:i}=this,o=t.length>>1;let r=1/0,l=1/0,a=-1/0,h=-1/0;for(let z=0;z<o;z++){const S=t[2*z],I=t[2*z+1];S<r&&(r=S),I<l&&(l=I),S>a&&(a=S),I>h&&(h=I),this._ids[z]=z}const u=(r+a)/2,c=(l+h)/2;let f=1/0,p,m,v;for(let z=0;z<o;z++){const S=ce(u,c,t[2*z],t[2*z+1]);S<f&&(p=z,f=S)}const y=t[2*p],w=t[2*p+1];f=1/0;for(let z=0;z<o;z++){if(z===p)continue;const S=ce(y,w,t[2*z],t[2*z+1]);S<f&&S>0&&(m=z,f=S)}let x=t[2*m],E=t[2*m+1],_=1/0;for(let z=0;z<o;z++){if(z===p||z===m)continue;const S=Go(y,w,x,E,t[2*z],t[2*z+1]);S<_&&(v=z,_=S)}let C=t[2*v],T=t[2*v+1];if(_===1/0){for(let I=0;I<o;I++)this._dists[I]=t[2*I]-t[0]||t[2*I+1]-t[1];Ct(this._ids,this._dists,0,o-1);const z=new Uint32Array(o);let S=0;for(let I=0,b=-1/0;I<o;I++){const M=this._ids[I];this._dists[M]>b&&(z[S++]=M,b=this._dists[M])}this.hull=z.subarray(0,S),this.triangles=new Uint32Array(0),this.halfedges=new Uint32Array(0);return}if(Gt(y,w,x,E,C,T)<0){const z=m,S=x,I=E;m=v,x=C,E=T,v=z,C=S,T=I}const N=Do(y,w,x,E,C,T);this._cx=N.x,this._cy=N.y;for(let z=0;z<o;z++)this._dists[z]=ce(t[2*z],t[2*z+1],N.x,N.y);Ct(this._ids,this._dists,0,o-1),this._hullStart=p;let R=3;s[p]=e[v]=m,s[m]=e[p]=v,s[v]=e[m]=p,n[p]=0,n[m]=1,n[v]=2,i.fill(-1),i[this._hashKey(y,w)]=p,i[this._hashKey(x,E)]=m,i[this._hashKey(C,T)]=v,this.trianglesLen=0,this._addTriangle(p,m,v,-1,-1,-1);for(let z=0,S,I;z<this._ids.length;z++){const b=this._ids[z],M=t[2*b],B=t[2*b+1];if(z>0&&Math.abs(M-S)<=es&&Math.abs(B-I)<=es||(S=M,I=B,b===p||b===m||b===v))continue;let A=0;for(let U=0,L=this._hashKey(M,B);U<this._hashSize&&(A=i[(L+U)%this._hashSize],!(A!==-1&&A!==s[A]));U++);A=e[A];let V=A,q;for(;q=s[V],Gt(M,B,t[2*V],t[2*V+1],t[2*q],t[2*q+1])>=0;)if(V=q,V===A){V=-1;break}if(V===-1)continue;let k=this._addTriangle(V,b,s[V],-1,-1,n[V]);n[b]=this._legalize(k+2),n[V]=k,R++;let W=s[V];for(;q=s[W],Gt(M,B,t[2*W],t[2*W+1],t[2*q],t[2*q+1])<0;)k=this._addTriangle(W,b,q,n[b],-1,n[W]),n[b]=this._legalize(k+2),s[W]=W,R--,W=q;if(V===A)for(;q=e[V],Gt(M,B,t[2*q],t[2*q+1],t[2*V],t[2*V+1])<0;)k=this._addTriangle(q,b,V,-1,n[V],n[q]),this._legalize(k+2),n[q]=k,s[V]=V,R--,V=q;this._hullStart=e[b]=V,s[V]=e[W]=b,s[b]=W,i[this._hashKey(M,B)]=b,i[this._hashKey(t[2*V],t[2*V+1])]=V}this.hull=new Uint32Array(R);for(let z=0,S=this._hullStart;z<R;z++)this.hull[z]=S,S=s[S];this.triangles=this._triangles.subarray(0,this.trianglesLen),this.halfedges=this._halfedges.subarray(0,this.trianglesLen)}_hashKey(t,e){return Math.floor(Wo(t-this._cx,e-this._cy)*this._hashSize)%this._hashSize}_legalize(t){const{_triangles:e,_halfedges:s,coords:n}=this;let i=0,o=0;for(;;){const r=s[t],l=t-t%3;if(o=l+(t+2)%3,r===-1){if(i===0)break;t=Dt[--i];continue}const a=r-r%3,h=l+(t+1)%3,u=a+(r+2)%3,c=e[o],f=e[t],p=e[h],m=e[u];if(Ho(n[2*c],n[2*c+1],n[2*f],n[2*f+1],n[2*p],n[2*p+1],n[2*m],n[2*m+1])){e[t]=m,e[r]=c;const y=s[u];if(y===-1){let x=this._hullStart;do{if(this._hullTri[x]===u){this._hullTri[x]=t;break}x=this._hullPrev[x]}while(x!==this._hullStart)}this._link(t,y),this._link(r,s[o]),this._link(o,u);const w=a+(r+1)%3;i<Dt.length&&(Dt[i++]=w)}else{if(i===0)break;t=Dt[--i]}}return o}_link(t,e){this._halfedges[t]=e,e!==-1&&(this._halfedges[e]=t)}_addTriangle(t,e,s,n,i,o){const r=this.trianglesLen;return this._triangles[r]=t,this._triangles[r+1]=e,this._triangles[r+2]=s,this._link(r,n),this._link(r+1,i),this._link(r+2,o),this.trianglesLen+=3,r}}function Wo(g,t){const e=g/(Math.abs(g)+Math.abs(t));return(t>0?3-e:1+e)/4}function ce(g,t,e,s){const n=g-e,i=t-s;return n*n+i*i}function Ho(g,t,e,s,n,i,o,r){const l=g-o,a=t-r,h=e-o,u=s-r,c=n-o,f=i-r,p=l*l+a*a,m=h*h+u*u,v=c*c+f*f;return l*(u*v-m*f)-a*(h*v-m*c)+p*(h*f-u*c)<0}function Go(g,t,e,s,n,i){const o=e-g,r=s-t,l=n-g,a=i-t,h=o*o+r*r,u=l*l+a*a,c=.5/(o*a-r*l),f=(a*h-r*u)*c,p=(o*u-l*h)*c;return f*f+p*p}function Do(g,t,e,s,n,i){const o=e-g,r=s-t,l=n-g,a=i-t,h=o*o+r*r,u=l*l+a*a,c=.5/(o*a-r*l),f=g+(a*h-r*u)*c,p=t+(o*u-l*h)*c;return{x:f,y:p}}function Ct(g,t,e,s){if(s-e<=20)for(let n=e+1;n<=s;n++){const i=g[n],o=t[i];let r=n-1;for(;r>=e&&t[g[r]]>o;)g[r+1]=g[r--];g[r+1]=i}else{const n=e+s>>1;let i=e+1,o=s;Bt(g,n,i),t[g[e]]>t[g[s]]&&Bt(g,e,s),t[g[i]]>t[g[s]]&&Bt(g,i,s),t[g[e]]>t[g[i]]&&Bt(g,e,i);const r=g[i],l=t[r];for(;;){do i++;while(t[g[i]]<l);do o--;while(t[g[o]]>l);if(o<i)break;Bt(g,i,o)}g[e+1]=g[o],g[o]=r,s-i+1>=o-e?(Ct(g,t,i,s),Ct(g,t,e,o-1)):(Ct(g,t,e,o-1),Ct(g,t,i,s))}}function Bt(g,t,e){const s=g[t];g[t]=g[e],g[e]=s}function Uo(g){return g[0]}function Yo(g){return g[1]}const ss=1e-6;class gt{constructor(){this._x0=this._y0=this._x1=this._y1=null,this._=""}moveTo(t,e){this._+=`M${this._x0=this._x1=+t},${this._y0=this._y1=+e}`}closePath(){this._x1!==null&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")}lineTo(t,e){this._+=`L${this._x1=+t},${this._y1=+e}`}arc(t,e,s){t=+t,e=+e,s=+s;const n=t+s,i=e;if(s<0)throw new Error("negative radius");this._x1===null?this._+=`M${n},${i}`:(Math.abs(this._x1-n)>ss||Math.abs(this._y1-i)>ss)&&(this._+="L"+n+","+i),s&&(this._+=`A${s},${s},0,1,1,${t-s},${e}A${s},${s},0,1,1,${this._x1=n},${this._y1=i}`)}rect(t,e,s,n){this._+=`M${this._x0=this._x1=+t},${this._y0=this._y1=+e}h${+s}v${+n}h${-s}Z`}value(){return this._||null}}class me{constructor(){this._=[]}moveTo(t,e){this._.push([t,e])}closePath(){this._.push(this._[0].slice())}lineTo(t,e){this._.push([t,e])}value(){return this._.length?this._:null}}class $o{constructor(t,[e,s,n,i]=[0,0,960,500]){if(!((n=+n)>=(e=+e))||!((i=+i)>=(s=+s)))throw new Error("invalid bounds");this.delaunay=t,this._circumcenters=new Float64Array(t.points.length*2),this.vectors=new Float64Array(t.points.length*2),this.xmax=n,this.xmin=e,this.ymax=i,this.ymin=s,this._init()}update(){return this.delaunay.update(),this._init(),this}_init(){const{delaunay:{points:t,hull:e,triangles:s},vectors:n}=this,i=this.circumcenters=this._circumcenters.subarray(0,s.length/3*2);for(let f=0,p=0,m=s.length,v,y;f<m;f+=3,p+=2){const w=s[f]*2,x=s[f+1]*2,E=s[f+2]*2,_=t[w],C=t[w+1],T=t[x],N=t[x+1],R=t[E],z=t[E+1],S=T-_,I=N-C,b=R-_,M=z-C,B=(S*M-I*b)*2;if(Math.abs(B)<1e-9){let A=1e9;const V=s[0]*2;A*=Math.sign((t[V]-_)*M-(t[V+1]-C)*b),v=(_+R)/2-A*M,y=(C+z)/2+A*b}else{const A=1/B,V=S*S+I*I,q=b*b+M*M;v=_+(M*V-I*q)*A,y=C+(S*q-b*V)*A}i[p]=v,i[p+1]=y}let o=e[e.length-1],r,l=o*4,a,h=t[2*o],u,c=t[2*o+1];n.fill(0);for(let f=0;f<e.length;++f)o=e[f],r=l,a=h,u=c,l=o*4,h=t[2*o],c=t[2*o+1],n[r+2]=n[l]=u-c,n[r+3]=n[l+1]=h-a}render(t){const e=t==null?t=new gt:void 0,{delaunay:{halfedges:s,inedges:n,hull:i},circumcenters:o,vectors:r}=this;if(i.length<=1)return null;for(let h=0,u=s.length;h<u;++h){const c=s[h];if(c<h)continue;const f=Math.floor(h/3)*2,p=Math.floor(c/3)*2,m=o[f],v=o[f+1],y=o[p],w=o[p+1];this._renderSegment(m,v,y,w,t)}let l,a=i[i.length-1];for(let h=0;h<i.length;++h){l=a,a=i[h];const u=Math.floor(n[a]/3)*2,c=o[u],f=o[u+1],p=l*4,m=this._project(c,f,r[p+2],r[p+3]);m&&this._renderSegment(c,f,m[0],m[1],t)}return e&&e.value()}renderBounds(t){const e=t==null?t=new gt:void 0;return t.rect(this.xmin,this.ymin,this.xmax-this.xmin,this.ymax-this.ymin),e&&e.value()}renderCell(t,e){const s=e==null?e=new gt:void 0,n=this._clip(t);if(n===null||!n.length)return;e.moveTo(n[0],n[1]);let i=n.length;for(;n[0]===n[i-2]&&n[1]===n[i-1]&&i>1;)i-=2;for(let o=2;o<i;o+=2)(n[o]!==n[o-2]||n[o+1]!==n[o-1])&&e.lineTo(n[o],n[o+1]);return e.closePath(),s&&s.value()}*cellPolygons(){const{delaunay:{points:t}}=this;for(let e=0,s=t.length/2;e<s;++e){const n=this.cellPolygon(e);n&&(n.index=e,yield n)}}cellPolygon(t){const e=new me;return this.renderCell(t,e),e.value()}_renderSegment(t,e,s,n,i){let o;const r=this._regioncode(t,e),l=this._regioncode(s,n);r===0&&l===0?(i.moveTo(t,e),i.lineTo(s,n)):(o=this._clipSegment(t,e,s,n,r,l))&&(i.moveTo(o[0],o[1]),i.lineTo(o[2],o[3]))}contains(t,e,s){return e=+e,e!==e||(s=+s,s!==s)?!1:this.delaunay._step(t,e,s)===t}*neighbors(t){const e=this._clip(t);if(e)for(const s of this.delaunay.neighbors(t)){const n=this._clip(s);if(n){t:for(let i=0,o=e.length;i<o;i+=2)for(let r=0,l=n.length;r<l;r+=2)if(e[i]==n[r]&&e[i+1]==n[r+1]&&e[(i+2)%o]==n[(r+l-2)%l]&&e[(i+3)%o]==n[(r+l-1)%l]){yield s;break t}}}}_cell(t){const{circumcenters:e,delaunay:{inedges:s,halfedges:n,triangles:i}}=this,o=s[t];if(o===-1)return null;const r=[];let l=o;do{const a=Math.floor(l/3);if(r.push(e[a*2],e[a*2+1]),l=l%3===2?l-2:l+1,i[l]!==t)break;l=n[l]}while(l!==o&&l!==-1);return r}_clip(t){if(t===0&&this.delaunay.hull.length===1)return[this.xmax,this.ymin,this.xmax,this.ymax,this.xmin,this.ymax,this.xmin,this.ymin];const e=this._cell(t);if(e===null)return null;const{vectors:s}=this,n=t*4;return s[n]||s[n+1]?this._clipInfinite(t,e,s[n],s[n+1],s[n+2],s[n+3]):this._clipFinite(t,e)}_clipFinite(t,e){const s=e.length;let n=null,i,o,r=e[s-2],l=e[s-1],a,h=this._regioncode(r,l),u,c=0;for(let f=0;f<s;f+=2)if(i=r,o=l,r=e[f],l=e[f+1],a=h,h=this._regioncode(r,l),a===0&&h===0)u=c,c=0,n?n.push(r,l):n=[r,l];else{let p,m,v,y,w;if(a===0){if((p=this._clipSegment(i,o,r,l,a,h))===null)continue;[m,v,y,w]=p}else{if((p=this._clipSegment(r,l,i,o,h,a))===null)continue;[y,w,m,v]=p,u=c,c=this._edgecode(m,v),u&&c&&this._edge(t,u,c,n,n.length),n?n.push(m,v):n=[m,v]}u=c,c=this._edgecode(y,w),u&&c&&this._edge(t,u,c,n,n.length),n?n.push(y,w):n=[y,w]}if(n)u=c,c=this._edgecode(n[0],n[1]),u&&c&&this._edge(t,u,c,n,n.length);else if(this.contains(t,(this.xmin+this.xmax)/2,(this.ymin+this.ymax)/2))return[this.xmax,this.ymin,this.xmax,this.ymax,this.xmin,this.ymax,this.xmin,this.ymin];return n}_clipSegment(t,e,s,n,i,o){for(;;){if(i===0&&o===0)return[t,e,s,n];if(i&o)return null;let r,l,a=i||o;a&8?(r=t+(s-t)*(this.ymax-e)/(n-e),l=this.ymax):a&4?(r=t+(s-t)*(this.ymin-e)/(n-e),l=this.ymin):a&2?(l=e+(n-e)*(this.xmax-t)/(s-t),r=this.xmax):(l=e+(n-e)*(this.xmin-t)/(s-t),r=this.xmin),i?(t=r,e=l,i=this._regioncode(t,e)):(s=r,n=l,o=this._regioncode(s,n))}}_clipInfinite(t,e,s,n,i,o){let r=Array.from(e),l;if((l=this._project(r[0],r[1],s,n))&&r.unshift(l[0],l[1]),(l=this._project(r[r.length-2],r[r.length-1],i,o))&&r.push(l[0],l[1]),r=this._clipFinite(t,r))for(let a=0,h=r.length,u,c=this._edgecode(r[h-2],r[h-1]);a<h;a+=2)u=c,c=this._edgecode(r[a],r[a+1]),u&&c&&(a=this._edge(t,u,c,r,a),h=r.length);else this.contains(t,(this.xmin+this.xmax)/2,(this.ymin+this.ymax)/2)&&(r=[this.xmin,this.ymin,this.xmax,this.ymin,this.xmax,this.ymax,this.xmin,this.ymax]);return r}_edge(t,e,s,n,i){for(;e!==s;){let o,r;switch(e){case 5:e=4;continue;case 4:e=6,o=this.xmax,r=this.ymin;break;case 6:e=2;continue;case 2:e=10,o=this.xmax,r=this.ymax;break;case 10:e=8;continue;case 8:e=9,o=this.xmin,r=this.ymax;break;case 9:e=1;continue;case 1:e=5,o=this.xmin,r=this.ymin;break}(n[i]!==o||n[i+1]!==r)&&this.contains(t,o,r)&&(n.splice(i,0,o,r),i+=2)}if(n.length>4)for(let o=0;o<n.length;o+=2){const r=(o+2)%n.length,l=(o+4)%n.length;(n[o]===n[r]&&n[r]===n[l]||n[o+1]===n[r+1]&&n[r+1]===n[l+1])&&(n.splice(r,2),o-=2)}return i}_project(t,e,s,n){let i=1/0,o,r,l;if(n<0){if(e<=this.ymin)return null;(o=(this.ymin-e)/n)<i&&(l=this.ymin,r=t+(i=o)*s)}else if(n>0){if(e>=this.ymax)return null;(o=(this.ymax-e)/n)<i&&(l=this.ymax,r=t+(i=o)*s)}if(s>0){if(t>=this.xmax)return null;(o=(this.xmax-t)/s)<i&&(r=this.xmax,l=e+(i=o)*n)}else if(s<0){if(t<=this.xmin)return null;(o=(this.xmin-t)/s)<i&&(r=this.xmin,l=e+(i=o)*n)}return[r,l]}_edgecode(t,e){return(t===this.xmin?1:t===this.xmax?2:0)|(e===this.ymin?4:e===this.ymax?8:0)}_regioncode(t,e){return(t<this.xmin?1:t>this.xmax?2:0)|(e<this.ymin?4:e>this.ymax?8:0)}}const Xo=2*Math.PI,zt=Math.pow;function Ko(g){return g[0]}function Zo(g){return g[1]}function Qo(g){const{triangles:t,coords:e}=g;for(let s=0;s<t.length;s+=3){const n=2*t[s],i=2*t[s+1],o=2*t[s+2];if((e[o]-e[n])*(e[i+1]-e[n+1])-(e[i]-e[n])*(e[o+1]-e[n+1])>1e-10)return!1}return!0}function Jo(g,t,e){return[g+Math.sin(g+t)*e,t+Math.cos(g-t)*e]}class ge{static from(t,e=Ko,s=Zo,n){return new ge("length"in t?tr(t,e,s,n):Float64Array.from(er(t,e,s,n)))}constructor(t){this._delaunator=new Kt(t),this.inedges=new Int32Array(t.length/2),this._hullIndex=new Int32Array(t.length/2),this.points=this._delaunator.coords,this._init()}update(){return this._delaunator.update(),this._init(),this}_init(){const t=this._delaunator,e=this.points;if(t.hull&&t.hull.length>2&&Qo(t)){this.collinear=Int32Array.from({length:e.length/2},(c,f)=>f).sort((c,f)=>e[2*c]-e[2*f]||e[2*c+1]-e[2*f+1]);const l=this.collinear[0],a=this.collinear[this.collinear.length-1],h=[e[2*l],e[2*l+1],e[2*a],e[2*a+1]],u=1e-8*Math.hypot(h[3]-h[1],h[2]-h[0]);for(let c=0,f=e.length/2;c<f;++c){const p=Jo(e[2*c],e[2*c+1],u);e[2*c]=p[0],e[2*c+1]=p[1]}this._delaunator=new Kt(e)}else delete this.collinear;const s=this.halfedges=this._delaunator.halfedges,n=this.hull=this._delaunator.hull,i=this.triangles=this._delaunator.triangles,o=this.inedges.fill(-1),r=this._hullIndex.fill(-1);for(let l=0,a=s.length;l<a;++l){const h=i[l%3===2?l-2:l+1];(s[l]===-1||o[h]===-1)&&(o[h]=l)}for(let l=0,a=n.length;l<a;++l)r[n[l]]=l;n.length<=2&&n.length>0&&(this.triangles=new Int32Array(3).fill(-1),this.halfedges=new Int32Array(3).fill(-1),this.triangles[0]=n[0],o[n[0]]=1,n.length===2&&(o[n[1]]=0,this.triangles[1]=n[1],this.triangles[2]=n[1]))}voronoi(t){return new $o(this,t)}*neighbors(t){const{inedges:e,hull:s,_hullIndex:n,halfedges:i,triangles:o,collinear:r}=this;if(r){const u=r.indexOf(t);u>0&&(yield r[u-1]),u<r.length-1&&(yield r[u+1]);return}const l=e[t];if(l===-1)return;let a=l,h=-1;do{if(yield h=o[a],a=a%3===2?a-2:a+1,o[a]!==t)return;if(a=i[a],a===-1){const u=s[(n[t]+1)%s.length];u!==h&&(yield u);return}}while(a!==l)}find(t,e,s=0){if(t=+t,t!==t||(e=+e,e!==e))return-1;const n=s;let i;for(;(i=this._step(s,t,e))>=0&&i!==s&&i!==n;)s=i;return i}_step(t,e,s){const{inedges:n,hull:i,_hullIndex:o,halfedges:r,triangles:l,points:a}=this;if(n[t]===-1||!a.length)return(t+1)%(a.length>>1);let h=t,u=zt(e-a[t*2],2)+zt(s-a[t*2+1],2);const c=n[t];let f=c;do{let p=l[f];const m=zt(e-a[p*2],2)+zt(s-a[p*2+1],2);if(m<u&&(u=m,h=p),f=f%3===2?f-2:f+1,l[f]!==t)break;if(f=r[f],f===-1){if(f=i[(o[t]+1)%i.length],f!==p&&zt(e-a[f*2],2)+zt(s-a[f*2+1],2)<u)return f;break}}while(f!==c);return h}render(t){const e=t==null?t=new gt:void 0,{points:s,halfedges:n,triangles:i}=this;for(let o=0,r=n.length;o<r;++o){const l=n[o];if(l<o)continue;const a=i[o]*2,h=i[l]*2;t.moveTo(s[a],s[a+1]),t.lineTo(s[h],s[h+1])}return this.renderHull(t),e&&e.value()}renderPoints(t,e){e===void 0&&(!t||typeof t.moveTo!="function")&&(e=t,t=null),e=e==null?2:+e;const s=t==null?t=new gt:void 0,{points:n}=this;for(let i=0,o=n.length;i<o;i+=2){const r=n[i],l=n[i+1];t.moveTo(r+e,l),t.arc(r,l,e,0,Xo)}return s&&s.value()}renderHull(t){const e=t==null?t=new gt:void 0,{hull:s,points:n}=this,i=s[0]*2,o=s.length;t.moveTo(n[i],n[i+1]);for(let r=1;r<o;++r){const l=2*s[r];t.lineTo(n[l],n[l+1])}return t.closePath(),e&&e.value()}hullPolygon(){const t=new me;return this.renderHull(t),t.value()}renderTriangle(t,e){const s=e==null?e=new gt:void 0,{points:n,triangles:i}=this,o=i[t*=3]*2,r=i[t+1]*2,l=i[t+2]*2;return e.moveTo(n[o],n[o+1]),e.lineTo(n[r],n[r+1]),e.lineTo(n[l],n[l+1]),e.closePath(),s&&s.value()}*trianglePolygons(){const{triangles:t}=this;for(let e=0,s=t.length/3;e<s;++e)yield this.trianglePolygon(e)}trianglePolygon(t){const e=new me;return this.renderTriangle(t,e),e.value()}}function tr(g,t,e,s){const n=g.length,i=new Float64Array(n*2);for(let o=0;o<n;++o){const r=g[o];i[o*2]=t.call(s,r,o,g),i[o*2+1]=e.call(s,r,o,g)}return i}function*er(g,t,e,s){let n=0;for(const i of g)yield t.call(s,i,n,g),yield e.call(s,i,n,g),++n}const Yt=0,sr=1,nr=new K,ns=new Es,he=new _s,is=new K,Ut=new zs;class os{constructor(){this.tolerance=-1,this.faces=[],this.newFaces=[],this.assigned=new rs,this.unassigned=new rs,this.vertices=[]}setFromPoints(t){if(t.length>=4){this.makeEmpty();for(let e=0,s=t.length;e<s;e++)this.vertices.push(new ir(t[e]));this.compute()}return this}setFromObject(t){const e=[];return t.updateMatrixWorld(!0),t.traverse(function(s){const n=s.geometry;if(n!==void 0){const i=n.attributes.position;if(i!==void 0)for(let o=0,r=i.count;o<r;o++){const l=new K;l.fromBufferAttribute(i,o).applyMatrix4(s.matrixWorld),e.push(l)}}}),this.setFromPoints(e)}containsPoint(t){const e=this.faces;for(let s=0,n=e.length;s<n;s++)if(e[s].distanceToPoint(t)>this.tolerance)return!1;return!0}intersectRay(t,e){const s=this.faces;let n=-1/0,i=1/0;for(let o=0,r=s.length;o<r;o++){const l=s[o],a=l.distanceToPoint(t.origin),h=l.normal.dot(t.direction);if(a>0&&h>=0)return null;const u=h!==0?-a/h:0;if(!(u<=0)&&(h>0?i=Math.min(u,i):n=Math.max(u,n),n>i))return null}return n!==-1/0?t.at(n,e):t.at(i,e),e}intersectsRay(t){return this.intersectRay(t,nr)!==null}makeEmpty(){return this.faces=[],this.vertices=[],this}addVertexToFace(t,e){return t.face=e,e.outside===null?this.assigned.append(t):this.assigned.insertBefore(e.outside,t),e.outside=t,this}removeVertexFromFace(t,e){return t===e.outside&&(t.next!==null&&t.next.face===e?e.outside=t.next:e.outside=null),this.assigned.remove(t),this}removeAllVerticesFromFace(t){if(t.outside!==null){const e=t.outside;let s=t.outside;for(;s.next!==null&&s.next.face===t;)s=s.next;return this.assigned.removeSubList(e,s),e.prev=s.next=null,t.outside=null,e}}deleteFaceVertices(t,e){const s=this.removeAllVerticesFromFace(t);if(s!==void 0)if(e===void 0)this.unassigned.appendChain(s);else{let n=s;do{const i=n.next;e.distanceToPoint(n.point)>this.tolerance?this.addVertexToFace(n,e):this.unassigned.append(n),n=i}while(n!==null)}return this}resolveUnassignedPoints(t){if(this.unassigned.isEmpty()===!1){let e=this.unassigned.first();do{const s=e.next;let n=this.tolerance,i=null;for(let o=0;o<t.length;o++){const r=t[o];if(r.mark===Yt){const l=r.distanceToPoint(e.point);if(l>n&&(n=l,i=r),n>1e3*this.tolerance)break}}i!==null&&this.addVertexToFace(e,i),e=s}while(e!==null)}return this}computeExtremes(){const t=new K,e=new K,s=[],n=[];for(let i=0;i<3;i++)s[i]=n[i]=this.vertices[0];t.copy(this.vertices[0].point),e.copy(this.vertices[0].point);for(let i=0,o=this.vertices.length;i<o;i++){const r=this.vertices[i],l=r.point;for(let a=0;a<3;a++)l.getComponent(a)<t.getComponent(a)&&(t.setComponent(a,l.getComponent(a)),s[a]=r);for(let a=0;a<3;a++)l.getComponent(a)>e.getComponent(a)&&(e.setComponent(a,l.getComponent(a)),n[a]=r)}return this.tolerance=3*Number.EPSILON*(Math.max(Math.abs(t.x),Math.abs(e.x))+Math.max(Math.abs(t.y),Math.abs(e.y))+Math.max(Math.abs(t.z),Math.abs(e.z))),{min:s,max:n}}computeInitialHull(){const t=this.vertices,e=this.computeExtremes(),s=e.min,n=e.max;let i=0,o=0;for(let c=0;c<3;c++){const f=n[c].point.getComponent(c)-s[c].point.getComponent(c);f>i&&(i=f,o=c)}const r=s[o],l=n[o];let a,h;i=0,ns.set(r.point,l.point);for(let c=0,f=this.vertices.length;c<f;c++){const p=t[c];if(p!==r&&p!==l){ns.closestPointToPoint(p.point,!0,is);const m=is.distanceToSquared(p.point);m>i&&(i=m,a=p)}}i=-1,he.setFromCoplanarPoints(r.point,l.point,a.point);for(let c=0,f=this.vertices.length;c<f;c++){const p=t[c];if(p!==r&&p!==l&&p!==a){const m=Math.abs(he.distanceToPoint(p.point));m>i&&(i=m,h=p)}}const u=[];if(he.distanceToPoint(h.point)<0){u.push(tt.create(r,l,a),tt.create(h,l,r),tt.create(h,a,l),tt.create(h,r,a));for(let c=0;c<3;c++){const f=(c+1)%3;u[c+1].getEdge(2).setTwin(u[0].getEdge(f)),u[c+1].getEdge(1).setTwin(u[f+1].getEdge(0))}}else{u.push(tt.create(r,a,l),tt.create(h,r,l),tt.create(h,l,a),tt.create(h,a,r));for(let c=0;c<3;c++){const f=(c+1)%3;u[c+1].getEdge(2).setTwin(u[0].getEdge((3-c)%3)),u[c+1].getEdge(0).setTwin(u[f+1].getEdge(1))}}for(let c=0;c<4;c++)this.faces.push(u[c]);for(let c=0,f=t.length;c<f;c++){const p=t[c];if(p!==r&&p!==l&&p!==a&&p!==h){i=this.tolerance;let m=null;for(let v=0;v<4;v++){const y=this.faces[v].distanceToPoint(p.point);y>i&&(i=y,m=this.faces[v])}m!==null&&this.addVertexToFace(p,m)}}return this}reindexFaces(){const t=[];for(let e=0;e<this.faces.length;e++){const s=this.faces[e];s.mark===Yt&&t.push(s)}return this.faces=t,this}nextVertexToAdd(){if(this.assigned.isEmpty()===!1){let t,e=0;const s=this.assigned.first().face;let n=s.outside;do{const i=s.distanceToPoint(n.point);i>e&&(e=i,t=n),n=n.next}while(n!==null&&n.face===s);return t}}computeHorizon(t,e,s,n){this.deleteFaceVertices(s),s.mark=sr;let i;e===null?i=e=s.getEdge(0):i=e.next;do{const o=i.twin,r=o.face;r.mark===Yt&&(r.distanceToPoint(t)>this.tolerance?this.computeHorizon(t,o,r,n):n.push(i)),i=i.next}while(i!==e);return this}addAdjoiningFace(t,e){const s=tt.create(t,e.tail(),e.head());return this.faces.push(s),s.getEdge(-1).setTwin(e.twin),s.getEdge(0)}addNewFaces(t,e){this.newFaces=[];let s=null,n=null;for(let i=0;i<e.length;i++){const o=e[i],r=this.addAdjoiningFace(t,o);s===null?s=r:r.next.setTwin(n),this.newFaces.push(r.face),n=r}return s.next.setTwin(n),this}addVertexToHull(t){const e=[];return this.unassigned.clear(),this.removeVertexFromFace(t,t.face),this.computeHorizon(t.point,null,t.face,e),this.addNewFaces(t,e),this.resolveUnassignedPoints(this.newFaces),this}cleanup(){return this.assigned.clear(),this.unassigned.clear(),this.newFaces=[],this}compute(){let t;for(this.computeInitialHull();(t=this.nextVertexToAdd())!==void 0;)this.addVertexToHull(t);return this.reindexFaces(),this.cleanup(),this}}class tt{constructor(){this.normal=new K,this.midpoint=new K,this.area=0,this.constant=0,this.outside=null,this.mark=Yt,this.edge=null}static create(t,e,s){const n=new tt,i=new ue(t,n),o=new ue(e,n),r=new ue(s,n);return i.next=r.prev=o,o.next=i.prev=r,r.next=o.prev=i,n.edge=i,n.compute()}getEdge(t){let e=this.edge;for(;t>0;)e=e.next,t--;for(;t<0;)e=e.prev,t++;return e}compute(){const t=this.edge.tail(),e=this.edge.head(),s=this.edge.next.head();return Ut.set(t.point,e.point,s.point),Ut.getNormal(this.normal),Ut.getMidpoint(this.midpoint),this.area=Ut.getArea(),this.constant=this.normal.dot(this.midpoint),this}distanceToPoint(t){return this.normal.dot(t)-this.constant}}class ue{constructor(t,e){this.vertex=t,this.prev=null,this.next=null,this.twin=null,this.face=e}head(){return this.vertex}tail(){return this.prev?this.prev.vertex:null}length(){const t=this.head(),e=this.tail();return e!==null?e.point.distanceTo(t.point):-1}lengthSquared(){const t=this.head(),e=this.tail();return e!==null?e.point.distanceToSquared(t.point):-1}setTwin(t){return this.twin=t,t.twin=this,this}}class ir{constructor(t){this.point=t,this.prev=null,this.next=null,this.face=null}}class rs{constructor(){this.head=null,this.tail=null}first(){return this.head}last(){return this.tail}clear(){return this.head=this.tail=null,this}insertBefore(t,e){return e.prev=t.prev,e.next=t,e.prev===null?this.head=e:e.prev.next=e,t.prev=e,this}insertAfter(t,e){return e.prev=t,e.next=t.next,e.next===null?this.tail=e:e.next.prev=e,t.next=e,this}append(t){return this.head===null?this.head=t:this.tail.next=t,t.prev=this.tail,t.next=null,this.tail=t,this}appendChain(t){for(this.head===null?this.head=t:this.tail.next=t,t.prev=this.tail;t.next!==null;)t=t.next;return this.tail=t,this}remove(t){return t.prev===null?this.head=t.next:t.prev.next=t.next,t.next===null?this.tail=t.prev:t.next.prev=t.prev,this}removeSubList(t,e){return t.prev===null?this.head=e.next:t.prev.next=e.next,e.next===null?this.tail=t.prev:e.next.prev=t.prev,this}isEmpty(){return this.head===null}}class or extends Pt{constructor(t=[]){super();const e=[],s=[];os===void 0&&console.error("THREE.ConvexGeometry: ConvexGeometry relies on ConvexHull");const i=new os().setFromPoints(t).faces;for(let o=0;o<i.length;o++){const r=i[o];let l=r.edge;do{const a=l.head().point;e.push(a.x,a.y,a.z),s.push(r.normal.x,r.normal.y,r.normal.z),l=l.next}while(l!==r.edge)}this.setAttribute("position",new be(e,3)),this.setAttribute("normal",new be(s,3))}}const de=3,fe=3;class rr{constructor(){j(this,"scene");j(this,"items",[]);const t=new Rt;this.scene=t.scene;const e=[...new Array(30)].map(()=>[Math.random()*de,Math.random()*fe]),n=ge.from(e).voronoi([0,0,de,fe]);let i=0;const o=[];for(;;){const r=n.cellPolygon(i);if(r[0][0]==null)break;i++,o.push(r)}o.forEach(r=>{const l=new Cs,a=r.shift();l.moveTo(a[0],a[1]),r.forEach(w=>{l.lineTo(w[0],w[1])});const u=new As(l,{steps:1,depth:.1,bevelEnabled:!1}).getAttribute("position").array,c=[];for(let w=0;w<u.length;w+=3)c.push(new K(u[w],u[w+1],u[w+2]));const f=new or(c),p=new ls({color:new Ms(Math.random(),Math.random(),Math.random()),wireframe:!1}),m=new et(f,p);this.scene.add(m),console.log(f);const v=this.CreateTrimesh(f),y=new F({mass:1});y.addShape(v),t.physics.addBody(y),this.items.push({mesh:m,body:y})}),this.apply()}update(){this.items.forEach(t=>{t.mesh.position.set(t.body.position.x,t.body.position.y,t.body.position.z),t.mesh.quaternion.set(t.body.quaternion.x,t.body.quaternion.y,t.body.quaternion.z,t.body.quaternion.w)})}apply(){this.items.forEach(t=>{t.body.position.set(t.mesh.position.x,t.mesh.position.y,t.mesh.position.z),t.body.quaternion.set(t.mesh.quaternion.x,t.mesh.quaternion.y,t.mesh.quaternion.z,t.mesh.quaternion.w)})}CreateTrimesh(t){let e;t.index===null?e=t.attributes.position.array:e=t.clone().toNonIndexed().attributes.position.array;const s=Object.keys(e).map(Number);return new Nt(e,s)}renderVoronoi(t){const e=document.createElement("canvas");document.body.appendChild(e),e.style.backgroundColor="#ccc",e.width=de,e.height=fe;const s=e.getContext("2d");s.beginPath(),t.render(s),s.lineWidth=.25,s.strokeStyle="#ff0000",s.fillStyle="#ffff33",s.stroke()}}class lr{constructor(){j(this,"scene");j(this,"camera");j(this,"renderer");j(this,"mesh");const t=new Rt;this.scene=new as,this.camera=t.oCamera,this.renderer=t.renderer;const e=new $t(2,2),s=new Ts({...ks});this.mesh=new et(e,s),this.mesh.material.uniforms.resolution.value.x=1/(window.innerWidth*this.renderer.getPixelRatio()),this.mesh.material.uniforms.resolution.value.y=1/(window.innerHeight*this.renderer.getPixelRatio()),this.scene.add(this.mesh)}render(t,e){this.renderer.setRenderTarget(t),this.mesh.material.uniforms.tDiffuse.value=e,this.renderer.render(this.scene,this.camera),this.renderer.setRenderTarget(null)}}class ar{constructor(){j(this,"scene");j(this,"camera");j(this,"renderer");j(this,"target");j(this,"sample");j(this,"boxes",[]);j(this,"floor");j(this,"voronoi");j(this,"fxaa");const t=new Rt;this.scene=t.scene,this.camera=t.camera,this.renderer=t.renderer,this.target=new Ss(t.size.width*Math.min(2,window.devicePixelRatio),t.size.height*Math.min(2,window.devicePixelRatio)),this.setUp()}setUp(){const t=new Bs(2236962);this.scene.add(t);const e=new Ps(16777215,.5);e.castShadow=!0;const s=1024;e.shadow.mapSize.width=s,e.shadow.mapSize.height=s,e.position.set(1,3,1),this.scene.add(e);const n=new Ns(e);this.scene.add(n),this.voronoi=new rr,this.floor=new Ro,this.fxaa=new lr}update(){this.voronoi.update(),this.renderer.setRenderTarget(this.target),this.renderer.render(this.scene,this.camera),this.fxaa.render(null,this.target.texture)}resize(){}}class cr{constructor(t,e,s){j(this,"scene");j(this,"world");j(this,"_meshes");j(this,"_material");j(this,"_particleMaterial",new Ee);j(this,"_sphereGeometry");j(this,"_boxGeometry");j(this,"_planeGeometry");j(this,"_particleGeometry");j(this,"tmpVec0",new d);j(this,"tmpVec1",new d);j(this,"tmpVec2",new d);j(this,"tmpQuat0",new D);this.scene=t,this.world=e,this._meshes=[],this._material=new ls({color:65280,wireframe:!0}),this._particleMaterial=new Ee({color:16711680,size:10,sizeAttenuation:!1,depthTest:!1}),this._sphereGeometry=new _e(1),this._boxGeometry=new ze(1,1,1),this._planeGeometry=new $t(10,10,10,10),this._particleGeometry=new Pt,this._particleGeometry.setFromPoints([new K(0,0,0)])}update(){const t=this.world.bodies,e=this._meshes,s=this.tmpVec0,n=this.tmpQuat0;let i=0;for(let o=0;o!==t.length;o++){const r=t[o];for(let l=0;l!==r.shapes.length;l++){const a=r.shapes[l];this._updateMesh(i,r,a);const h=e[i];h&&(r.quaternion.vmult(r.shapeOffsets[l],s),r.position.vadd(s,s),r.quaternion.mult(r.shapeOrientations[l],n),h.position.x=s.x,h.position.y=s.y,h.position.z=s.z,h.quaternion.x=n.x,h.quaternion.y=n.y,h.quaternion.z=n.z,h.quaternion.w=n.w),i++}}for(let o=i;o<e.length;o++){const r=e[o];r&&this.scene.remove(r)}e.length=i}_updateMesh(t,e,s){let n=this._meshes[t];this._typeMatch(n,s)||(n&&this.scene.remove(n),n=this._meshes[t]=this._createMesh(s)),this._scaleMesh(n,s)}_typeMatch(t,e){if(!t)return!1;const s=t.geometry;return s instanceof _e&&e instanceof Gn||s instanceof ze&&e instanceof Zt||s instanceof Ce&&e instanceof Dn||s instanceof $t&&e instanceof ys||e instanceof dt||s.id===e.id&&e instanceof Nt||s.id===e.id&&e instanceof Un}_createMesh(t){let e,s,n,i,o;const r=this._material;let l=[];switch(t.type){case P.types.SPHERE:e=new et(this._sphereGeometry,r);break;case P.types.BOX:e=new et(this._boxGeometry,r);break;case P.types.CYLINDER:s=new Ce(t.radiusTop,t.radiusBottom,t.height,t.numSegments),e=new et(s,r);break;case P.types.PLANE:e=new et(this._planeGeometry,r);break;case P.types.PARTICLE:e=new Is(this._particleGeometry,this._particleMaterial);break;case P.types.CONVEXPOLYHEDRON:s=new Pt,t.id=s.id,l=[];for(let h=0;h<t.vertices.length;h+=1){const u=t.vertices[h];l.push(new K(u.x,u.y,u.z))}s.setFromPoints(l);const a=[];for(let h=0;h<t.faces.length;h++){const u=t.faces[h],c=u[0];for(let f=1;f<u.length-1;f++){const p=u[f],m=u[f+1];a.push(c,p,m)}}s.setIndex(a),e=new et(s,r);break;case P.types.TRIMESH:s=new Pt,t.id=s.id,l=[];for(let h=0;h<t.vertices.length;h+=3)l.push(new K(t.vertices[h],t.vertices[h+1],t.vertices[h+2]));s.setFromPoints(l),e=new et(s,r);break;case P.types.HEIGHTFIELD:s=new Pt,n=this.tmpVec0,i=this.tmpVec1,o=this.tmpVec2;for(let h=0;h<t.data.length-1;h++)for(let u=0;u<t.data[h].length-1;u++)for(let c=0;c<2;c++)t.getConvexTrianglePillar(h,u,c===0),n.copy(t.pillarConvex.vertices[0]),i.copy(t.pillarConvex.vertices[1]),o.copy(t.pillarConvex.vertices[2]),n.vadd(t.pillarOffset,n),i.vadd(t.pillarOffset,i),o.vadd(t.pillarOffset,o),l.push(new K(n.x,n.y,n.z),new K(i.x,i.y,i.z),new K(o.x,o.y,o.z));s.setFromPoints(l),e=new et(s,r),t.id=s.id;break;default:e=new et;break}return e&&e.geometry&&this.scene.add(e),e}_scaleMesh(t,e){let s,n,i;switch(e.type){case P.types.SPHERE:s=e.radius,t.scale.set(s,s,s);break;case P.types.BOX:n=e.halfExtents,t.scale.copy(new K(n.x,n.y,n.z)),t.scale.multiplyScalar(2);break;case P.types.CONVEXPOLYHEDRON:t.scale.set(1,1,1);break;case P.types.TRIMESH:i=e.scale,t.scale.copy(new K(i.x,i.y,i.z));break;case P.types.HEIGHTFIELD:t.scale.set(1,1,1);break}}}let pe;class Rt{constructor(t){j(this,"scene");j(this,"camera");j(this,"oCamera");j(this,"renderer");j(this,"world");j(this,"physics");j(this,"dd");j(this,"size");j(this,"debug");if(pe)return pe;!t||(pe=this,this.init(t))}init(t){this.debug=new Fo,this.size={width:window.innerWidth,height:window.innerHeight},this.scene=new as,this.camera=new Fs(45,this.size.width/this.size.height,.1,100),this.camera.position.set(0,6,8),this.camera.lookAt(0,0,0),this.oCamera=new Rs(-1,1,1,-1,1,10),this.oCamera.position.set(0,0,10),this.oCamera.lookAt(0,0,0),this.renderer=new qs({canvas:t}),this.renderer.setSize(this.size.width,this.size.height),this.renderer.setPixelRatio(Math.min(2,window.devicePixelRatio)),this.renderer.outputEncoding=Vs,this.renderer.shadowMap.enabled=!0,this.physics=new Mo,this.physics.gravity.set(0,-9.82,0),this.dd=new cr(this.scene,this.physics),this.world=new ar,new Ls(this.camera,t),this.render()}render(){this.debug.begin(),this.physics.step(1/60),this.dd.update(),this.world.update(),this.debug.end(),requestAnimationFrame(()=>this.render())}resize(){}}const hr=document.querySelector(".webgl"),ur=new Rt(hr);window.addEventListener("resize",()=>{ur.resize()});
